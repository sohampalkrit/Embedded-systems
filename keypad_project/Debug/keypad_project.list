
keypad_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e50  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000fd8  08000fd8  00001fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001018  08001018  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001018  08001018  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001018  08001018  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001018  08001018  00002018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800101c  0800101c  0000201c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001020  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009a3  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000344  00000000  00000000  00003a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00003d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c5  00000000  00000000  00003e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b72  00000000  00000000  00003f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001594  00000000  00000000  00006ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000097c0  00000000  00000000  0000805b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001181b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a04  00000000  00000000  00011860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00012264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000fc0 	.word	0x08000fc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08000fc0 	.word	0x08000fc0

080001c8 <delay>:
  ******************************************************************************
*/

#include<stdio.h>
#include<stdint.h>
void delay(){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<30000;i++);
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f247 522f 	movw	r2, #29999	@ 0x752f
 80001e0:	4293      	cmp	r3, r2
 80001e2:	d9f7      	bls.n	80001d4 <delay+0xc>
}
 80001e4:	bf00      	nop
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr

080001f0 <main>:

int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0
	uint32_t volatile *const pClkctrlreg = (uint32_t *)0x40023830;
 80001f6:	4b91      	ldr	r3, [pc, #580]	@ (800043c <main+0x24c>)
 80001f8:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const pPortDmodereg = (uint32_t *)0x40020C00;
 80001fa:	4b91      	ldr	r3, [pc, #580]	@ (8000440 <main+0x250>)
 80001fc:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pOutModeDreg =(uint32_t *)0x40020C14;
 80001fe:	4b91      	ldr	r3, [pc, #580]	@ (8000444 <main+0x254>)
 8000200:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const pINModeDreg =(uint32_t *)0x40020C10;
 8000202:	4b91      	ldr	r3, [pc, #580]	@ (8000448 <main+0x258>)
 8000204:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const pPullUpDownreg =(uint32_t *)(0x40020C00+0x0C);
 8000206:	4b91      	ldr	r3, [pc, #580]	@ (800044c <main+0x25c>)
 8000208:	607b      	str	r3, [r7, #4]
	//enabling clock for port D register
	*pClkctrlreg |=(1<<3);
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 0208 	orr.w	r2, r3, #8
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	601a      	str	r2, [r3, #0]
	//enabling mode register for PD0-PD3 and PD8-PD11
	*pPortDmodereg &=~(0xFF);
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	601a      	str	r2, [r3, #0]
	*pPortDmodereg |=(0x55);
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0255 	orr.w	r2, r3, #85	@ 0x55
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	601a      	str	r2, [r3, #0]
	*pPortDmodereg &=~(0xFF<<16);
 800022e:	693b      	ldr	r3, [r7, #16]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	601a      	str	r2, [r3, #0]

	//adding pull up register
	*pPullUpDownreg &=~(0xFF<<16);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	601a      	str	r2, [r3, #0]
	*pPullUpDownreg |=(0x55<<16);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f443 02aa 	orr.w	r2, r3, #5570560	@ 0x550000
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	601a      	str	r2, [r3, #0]
while(1){
	//making all rows high
	*pOutModeDreg |=(0x0F);
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f043 020f 	orr.w	r2, r3, #15
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	601a      	str	r2, [r3, #0]
	//make R1 low
	*pOutModeDreg &=~(1<<0);
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f023 0201 	bic.w	r2, r3, #1
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	601a      	str	r2, [r3, #0]
	//check for c1
	if(!(*pINModeDreg & (1<<8))){
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000272:	2b00      	cmp	r3, #0
 8000274:	d105      	bne.n	8000282 <main+0x92>
		delay();
 8000276:	f7ff ffa7 	bl	80001c8 <delay>
		printf("1\n");
 800027a:	4875      	ldr	r0, [pc, #468]	@ (8000450 <main+0x260>)
 800027c:	f000 fb10 	bl	80008a0 <puts>
		break;
 8000280:	e0d7      	b.n	8000432 <main+0x242>
	}
	if(!(*pINModeDreg & (1<<9))){
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800028a:	2b00      	cmp	r3, #0
 800028c:	d105      	bne.n	800029a <main+0xaa>
			delay();
 800028e:	f7ff ff9b 	bl	80001c8 <delay>
			printf("2\n");
 8000292:	4870      	ldr	r0, [pc, #448]	@ (8000454 <main+0x264>)
 8000294:	f000 fb04 	bl	80008a0 <puts>
			break;
 8000298:	e0cb      	b.n	8000432 <main+0x242>
		}
	if(!(*pINModeDreg & (1<<10))){
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d105      	bne.n	80002b2 <main+0xc2>
			delay();
 80002a6:	f7ff ff8f 	bl	80001c8 <delay>
			printf("3\n");
 80002aa:	486b      	ldr	r0, [pc, #428]	@ (8000458 <main+0x268>)
 80002ac:	f000 faf8 	bl	80008a0 <puts>
			break;
 80002b0:	e0bf      	b.n	8000432 <main+0x242>
		}
	if(!(*pINModeDreg & (1<<11))){
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d105      	bne.n	80002ca <main+0xda>
			delay();
 80002be:	f7ff ff83 	bl	80001c8 <delay>
			printf("A\n");
 80002c2:	4866      	ldr	r0, [pc, #408]	@ (800045c <main+0x26c>)
 80002c4:	f000 faec 	bl	80008a0 <puts>
			break;
 80002c8:	e0b3      	b.n	8000432 <main+0x242>
		}
	//making all rows high
		*pOutModeDreg |=(0x0F);
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 020f 	orr.w	r2, r3, #15
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]
		//make R2 low
		*pOutModeDreg &=~(1<<1);
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f023 0202 	bic.w	r2, r3, #2
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	601a      	str	r2, [r3, #0]
		//check for c1
		if(!(*pINModeDreg&(1<<8))){
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d105      	bne.n	80002fa <main+0x10a>
			delay();
 80002ee:	f7ff ff6b 	bl	80001c8 <delay>
			printf("4\n");
 80002f2:	485b      	ldr	r0, [pc, #364]	@ (8000460 <main+0x270>)
 80002f4:	f000 fad4 	bl	80008a0 <puts>
			break;
 80002f8:	e09b      	b.n	8000432 <main+0x242>
		}
		if(!(*pINModeDreg & (1<<9))){
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000302:	2b00      	cmp	r3, #0
 8000304:	d105      	bne.n	8000312 <main+0x122>
				delay();
 8000306:	f7ff ff5f 	bl	80001c8 <delay>
				printf("5\n");
 800030a:	4856      	ldr	r0, [pc, #344]	@ (8000464 <main+0x274>)
 800030c:	f000 fac8 	bl	80008a0 <puts>
				break;
 8000310:	e08f      	b.n	8000432 <main+0x242>
			}
		if(!(*pINModeDreg & (1<<10))){
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800031a:	2b00      	cmp	r3, #0
 800031c:	d105      	bne.n	800032a <main+0x13a>
				delay();
 800031e:	f7ff ff53 	bl	80001c8 <delay>
				printf("6\n");
 8000322:	4851      	ldr	r0, [pc, #324]	@ (8000468 <main+0x278>)
 8000324:	f000 fabc 	bl	80008a0 <puts>
				break;
 8000328:	e083      	b.n	8000432 <main+0x242>
			}
		if(!(*pINModeDreg & (1<<11))){
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000332:	2b00      	cmp	r3, #0
 8000334:	d105      	bne.n	8000342 <main+0x152>
				delay();
 8000336:	f7ff ff47 	bl	80001c8 <delay>
				printf("B\n");
 800033a:	484c      	ldr	r0, [pc, #304]	@ (800046c <main+0x27c>)
 800033c:	f000 fab0 	bl	80008a0 <puts>
				break;
 8000340:	e077      	b.n	8000432 <main+0x242>
			}
      //making all rows high
			*pOutModeDreg |=(0x0F);
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f043 020f 	orr.w	r2, r3, #15
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	601a      	str	r2, [r3, #0]
			//make R3 low
			*pOutModeDreg &=~(1<<2);
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f023 0204 	bic.w	r2, r3, #4
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	601a      	str	r2, [r3, #0]
			//check for c1
			if(!(*pINModeDreg&(1<<8))){
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000362:	2b00      	cmp	r3, #0
 8000364:	d105      	bne.n	8000372 <main+0x182>
				delay();
 8000366:	f7ff ff2f 	bl	80001c8 <delay>
				printf("7\n");
 800036a:	4841      	ldr	r0, [pc, #260]	@ (8000470 <main+0x280>)
 800036c:	f000 fa98 	bl	80008a0 <puts>
				break;
 8000370:	e05f      	b.n	8000432 <main+0x242>
			}
			if(!(*pINModeDreg & (1<<9))){
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800037a:	2b00      	cmp	r3, #0
 800037c:	d105      	bne.n	800038a <main+0x19a>
					delay();
 800037e:	f7ff ff23 	bl	80001c8 <delay>
					printf("8\n");
 8000382:	483c      	ldr	r0, [pc, #240]	@ (8000474 <main+0x284>)
 8000384:	f000 fa8c 	bl	80008a0 <puts>
					break;
 8000388:	e053      	b.n	8000432 <main+0x242>
				}
			if(!(*pINModeDreg & (1<<10))){
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000392:	2b00      	cmp	r3, #0
 8000394:	d105      	bne.n	80003a2 <main+0x1b2>
					delay();
 8000396:	f7ff ff17 	bl	80001c8 <delay>
					printf("9\n");
 800039a:	4837      	ldr	r0, [pc, #220]	@ (8000478 <main+0x288>)
 800039c:	f000 fa80 	bl	80008a0 <puts>
					break;
 80003a0:	e047      	b.n	8000432 <main+0x242>
				}
			if(!(*pINModeDreg & (1<<11))){
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d105      	bne.n	80003ba <main+0x1ca>
					delay();
 80003ae:	f7ff ff0b 	bl	80001c8 <delay>
					printf("C\n");
 80003b2:	4832      	ldr	r0, [pc, #200]	@ (800047c <main+0x28c>)
 80003b4:	f000 fa74 	bl	80008a0 <puts>
					break;
 80003b8:	e03b      	b.n	8000432 <main+0x242>
				}
			//making all rows high
				*pOutModeDreg |=(0x0F);
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f043 020f 	orr.w	r2, r3, #15
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	601a      	str	r2, [r3, #0]
				//make R4 low
				*pOutModeDreg &=~(1<<3);
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f023 0208 	bic.w	r2, r3, #8
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	601a      	str	r2, [r3, #0]
				//check for c1
				if(!(*pINModeDreg & (1<<8))){
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d105      	bne.n	80003ea <main+0x1fa>
					delay();
 80003de:	f7ff fef3 	bl	80001c8 <delay>
					printf("*\n");
 80003e2:	4827      	ldr	r0, [pc, #156]	@ (8000480 <main+0x290>)
 80003e4:	f000 fa5c 	bl	80008a0 <puts>
					break;
 80003e8:	e023      	b.n	8000432 <main+0x242>
				}
				if(!(*pINModeDreg & (1<<9))){
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d105      	bne.n	8000402 <main+0x212>
						delay();
 80003f6:	f7ff fee7 	bl	80001c8 <delay>
						printf("0\n");
 80003fa:	4822      	ldr	r0, [pc, #136]	@ (8000484 <main+0x294>)
 80003fc:	f000 fa50 	bl	80008a0 <puts>
						break;
 8000400:	e017      	b.n	8000432 <main+0x242>
					}
				if(!(*pINModeDreg & (1<<10))){
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800040a:	2b00      	cmp	r3, #0
 800040c:	d105      	bne.n	800041a <main+0x22a>
						delay();
 800040e:	f7ff fedb 	bl	80001c8 <delay>
						printf("#\n");
 8000412:	481d      	ldr	r0, [pc, #116]	@ (8000488 <main+0x298>)
 8000414:	f000 fa44 	bl	80008a0 <puts>
						break;
 8000418:	e00b      	b.n	8000432 <main+0x242>
					}
				if(!(*pINModeDreg & (1<<11))){
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000422:	2b00      	cmp	r3, #0
 8000424:	f47f af15 	bne.w	8000252 <main+0x62>
						delay();
 8000428:	f7ff fece 	bl	80001c8 <delay>
						printf("D\n");
 800042c:	4817      	ldr	r0, [pc, #92]	@ (800048c <main+0x29c>)
 800042e:	f000 fa37 	bl	80008a0 <puts>
 8000432:	2300      	movs	r3, #0
					}
}



}
 8000434:	4618      	mov	r0, r3
 8000436:	3718      	adds	r7, #24
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40023830 	.word	0x40023830
 8000440:	40020c00 	.word	0x40020c00
 8000444:	40020c14 	.word	0x40020c14
 8000448:	40020c10 	.word	0x40020c10
 800044c:	40020c0c 	.word	0x40020c0c
 8000450:	08000fd8 	.word	0x08000fd8
 8000454:	08000fdc 	.word	0x08000fdc
 8000458:	08000fe0 	.word	0x08000fe0
 800045c:	08000fe4 	.word	0x08000fe4
 8000460:	08000fe8 	.word	0x08000fe8
 8000464:	08000fec 	.word	0x08000fec
 8000468:	08000ff0 	.word	0x08000ff0
 800046c:	08000ff4 	.word	0x08000ff4
 8000470:	08000ff8 	.word	0x08000ff8
 8000474:	08000ffc 	.word	0x08000ffc
 8000478:	08001000 	.word	0x08001000
 800047c:	08001004 	.word	0x08001004
 8000480:	08001008 	.word	0x08001008
 8000484:	0800100c 	.word	0x0800100c
 8000488:	08001010 	.word	0x08001010
 800048c:	08001014 	.word	0x08001014

08000490 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800049a:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <ITM_SendChar+0x44>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a0d      	ldr	r2, [pc, #52]	@ (80004d4 <ITM_SendChar+0x44>)
 80004a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004a4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004a6:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <ITM_SendChar+0x48>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a0b      	ldr	r2, [pc, #44]	@ (80004d8 <ITM_SendChar+0x48>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004b2:	bf00      	nop
 80004b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d0f8      	beq.n	80004b4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004c2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	6013      	str	r3, [r2, #0]
}
 80004ca:	bf00      	nop
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	e000edfc 	.word	0xe000edfc
 80004d8:	e0000e00 	.word	0xe0000e00

080004dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	e00a      	b.n	8000504 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004ee:	f3af 8000 	nop.w
 80004f2:	4601      	mov	r1, r0
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	60ba      	str	r2, [r7, #8]
 80004fa:	b2ca      	uxtb	r2, r1
 80004fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	3301      	adds	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	429a      	cmp	r2, r3
 800050a:	dbf0      	blt.n	80004ee <_read+0x12>
	}

return len;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b086      	sub	sp, #24
 800051a:	af00      	add	r7, sp, #0
 800051c:	60f8      	str	r0, [r7, #12]
 800051e:	60b9      	str	r1, [r7, #8]
 8000520:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	e009      	b.n	800053c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	60ba      	str	r2, [r7, #8]
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ffad 	bl	8000490 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3301      	adds	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	dbf1      	blt.n	8000528 <_write+0x12>
	}
	return len;
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <_close>:

int _close(int file)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
	return -1;
 8000556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000574:	605a      	str	r2, [r3, #4]
	return 0;
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <_isatty>:

int _isatty(int file)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
	return 1;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000596:	b480      	push	{r7}
 8000598:	b085      	sub	sp, #20
 800059a:	af00      	add	r7, sp, #0
 800059c:	60f8      	str	r0, [r7, #12]
 800059e:	60b9      	str	r1, [r7, #8]
 80005a0:	607a      	str	r2, [r7, #4]
	return 0;
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
	...

080005b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b8:	4a14      	ldr	r2, [pc, #80]	@ (800060c <_sbrk+0x5c>)
 80005ba:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <_sbrk+0x60>)
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c4:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <_sbrk+0x64>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005cc:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <_sbrk+0x64>)
 80005ce:	4a12      	ldr	r2, [pc, #72]	@ (8000618 <_sbrk+0x68>)
 80005d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005d2:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <_sbrk+0x64>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d207      	bcs.n	80005f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e0:	f000 fa8c 	bl	8000afc <__errno>
 80005e4:	4603      	mov	r3, r0
 80005e6:	220c      	movs	r2, #12
 80005e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	e009      	b.n	8000604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f0:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <_sbrk+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005f6:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <_sbrk+0x64>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	4a05      	ldr	r2, [pc, #20]	@ (8000614 <_sbrk+0x64>)
 8000600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000602:	68fb      	ldr	r3, [r7, #12]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20020000 	.word	0x20020000
 8000610:	00000400 	.word	0x00000400
 8000614:	20000078 	.word	0x20000078
 8000618:	200001c8 	.word	0x200001c8

0800061c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800061c:	480d      	ldr	r0, [pc, #52]	@ (8000654 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000620:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000624:	480c      	ldr	r0, [pc, #48]	@ (8000658 <LoopForever+0x6>)
  ldr r1, =_edata
 8000626:	490d      	ldr	r1, [pc, #52]	@ (800065c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000628:	4a0d      	ldr	r2, [pc, #52]	@ (8000660 <LoopForever+0xe>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063a:	4a0a      	ldr	r2, [pc, #40]	@ (8000664 <LoopForever+0x12>)
  ldr r4, =_ebss
 800063c:	4c0a      	ldr	r4, [pc, #40]	@ (8000668 <LoopForever+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064a:	f000 fa5d 	bl	8000b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064e:	f7ff fdcf 	bl	80001f0 <main>

08000652 <LoopForever>:

LoopForever:
  b LoopForever
 8000652:	e7fe      	b.n	8000652 <LoopForever>
  ldr   r0, =_estack
 8000654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800065c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000660:	08001020 	.word	0x08001020
  ldr r2, =_sbss
 8000664:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000668:	200001c8 	.word	0x200001c8

0800066c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800066c:	e7fe      	b.n	800066c <ADC_IRQHandler>
	...

08000670 <std>:
 8000670:	2300      	movs	r3, #0
 8000672:	b510      	push	{r4, lr}
 8000674:	4604      	mov	r4, r0
 8000676:	e9c0 3300 	strd	r3, r3, [r0]
 800067a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800067e:	6083      	str	r3, [r0, #8]
 8000680:	8181      	strh	r1, [r0, #12]
 8000682:	6643      	str	r3, [r0, #100]	@ 0x64
 8000684:	81c2      	strh	r2, [r0, #14]
 8000686:	6183      	str	r3, [r0, #24]
 8000688:	4619      	mov	r1, r3
 800068a:	2208      	movs	r2, #8
 800068c:	305c      	adds	r0, #92	@ 0x5c
 800068e:	f000 f9e7 	bl	8000a60 <memset>
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <std+0x58>)
 8000694:	6263      	str	r3, [r4, #36]	@ 0x24
 8000696:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <std+0x5c>)
 8000698:	62a3      	str	r3, [r4, #40]	@ 0x28
 800069a:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <std+0x60>)
 800069c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800069e:	4b0d      	ldr	r3, [pc, #52]	@ (80006d4 <std+0x64>)
 80006a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <std+0x68>)
 80006a4:	6224      	str	r4, [r4, #32]
 80006a6:	429c      	cmp	r4, r3
 80006a8:	d006      	beq.n	80006b8 <std+0x48>
 80006aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006ae:	4294      	cmp	r4, r2
 80006b0:	d002      	beq.n	80006b8 <std+0x48>
 80006b2:	33d0      	adds	r3, #208	@ 0xd0
 80006b4:	429c      	cmp	r4, r3
 80006b6:	d105      	bne.n	80006c4 <std+0x54>
 80006b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c0:	f000 ba46 	b.w	8000b50 <__retarget_lock_init_recursive>
 80006c4:	bd10      	pop	{r4, pc}
 80006c6:	bf00      	nop
 80006c8:	080008b1 	.word	0x080008b1
 80006cc:	080008d3 	.word	0x080008d3
 80006d0:	0800090b 	.word	0x0800090b
 80006d4:	0800092f 	.word	0x0800092f
 80006d8:	2000007c 	.word	0x2000007c

080006dc <stdio_exit_handler>:
 80006dc:	4a02      	ldr	r2, [pc, #8]	@ (80006e8 <stdio_exit_handler+0xc>)
 80006de:	4903      	ldr	r1, [pc, #12]	@ (80006ec <stdio_exit_handler+0x10>)
 80006e0:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <stdio_exit_handler+0x14>)
 80006e2:	f000 b869 	b.w	80007b8 <_fwalk_sglue>
 80006e6:	bf00      	nop
 80006e8:	20000000 	.word	0x20000000
 80006ec:	08000e49 	.word	0x08000e49
 80006f0:	20000010 	.word	0x20000010

080006f4 <cleanup_stdio>:
 80006f4:	6841      	ldr	r1, [r0, #4]
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <cleanup_stdio+0x34>)
 80006f8:	4299      	cmp	r1, r3
 80006fa:	b510      	push	{r4, lr}
 80006fc:	4604      	mov	r4, r0
 80006fe:	d001      	beq.n	8000704 <cleanup_stdio+0x10>
 8000700:	f000 fba2 	bl	8000e48 <_fflush_r>
 8000704:	68a1      	ldr	r1, [r4, #8]
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <cleanup_stdio+0x38>)
 8000708:	4299      	cmp	r1, r3
 800070a:	d002      	beq.n	8000712 <cleanup_stdio+0x1e>
 800070c:	4620      	mov	r0, r4
 800070e:	f000 fb9b 	bl	8000e48 <_fflush_r>
 8000712:	68e1      	ldr	r1, [r4, #12]
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <cleanup_stdio+0x3c>)
 8000716:	4299      	cmp	r1, r3
 8000718:	d004      	beq.n	8000724 <cleanup_stdio+0x30>
 800071a:	4620      	mov	r0, r4
 800071c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000720:	f000 bb92 	b.w	8000e48 <_fflush_r>
 8000724:	bd10      	pop	{r4, pc}
 8000726:	bf00      	nop
 8000728:	2000007c 	.word	0x2000007c
 800072c:	200000e4 	.word	0x200000e4
 8000730:	2000014c 	.word	0x2000014c

08000734 <global_stdio_init.part.0>:
 8000734:	b510      	push	{r4, lr}
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <global_stdio_init.part.0+0x30>)
 8000738:	4c0b      	ldr	r4, [pc, #44]	@ (8000768 <global_stdio_init.part.0+0x34>)
 800073a:	4a0c      	ldr	r2, [pc, #48]	@ (800076c <global_stdio_init.part.0+0x38>)
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	4620      	mov	r0, r4
 8000740:	2200      	movs	r2, #0
 8000742:	2104      	movs	r1, #4
 8000744:	f7ff ff94 	bl	8000670 <std>
 8000748:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800074c:	2201      	movs	r2, #1
 800074e:	2109      	movs	r1, #9
 8000750:	f7ff ff8e 	bl	8000670 <std>
 8000754:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000758:	2202      	movs	r2, #2
 800075a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800075e:	2112      	movs	r1, #18
 8000760:	f7ff bf86 	b.w	8000670 <std>
 8000764:	200001b4 	.word	0x200001b4
 8000768:	2000007c 	.word	0x2000007c
 800076c:	080006dd 	.word	0x080006dd

08000770 <__sfp_lock_acquire>:
 8000770:	4801      	ldr	r0, [pc, #4]	@ (8000778 <__sfp_lock_acquire+0x8>)
 8000772:	f000 b9ee 	b.w	8000b52 <__retarget_lock_acquire_recursive>
 8000776:	bf00      	nop
 8000778:	200001bd 	.word	0x200001bd

0800077c <__sfp_lock_release>:
 800077c:	4801      	ldr	r0, [pc, #4]	@ (8000784 <__sfp_lock_release+0x8>)
 800077e:	f000 b9e9 	b.w	8000b54 <__retarget_lock_release_recursive>
 8000782:	bf00      	nop
 8000784:	200001bd 	.word	0x200001bd

08000788 <__sinit>:
 8000788:	b510      	push	{r4, lr}
 800078a:	4604      	mov	r4, r0
 800078c:	f7ff fff0 	bl	8000770 <__sfp_lock_acquire>
 8000790:	6a23      	ldr	r3, [r4, #32]
 8000792:	b11b      	cbz	r3, 800079c <__sinit+0x14>
 8000794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000798:	f7ff bff0 	b.w	800077c <__sfp_lock_release>
 800079c:	4b04      	ldr	r3, [pc, #16]	@ (80007b0 <__sinit+0x28>)
 800079e:	6223      	str	r3, [r4, #32]
 80007a0:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <__sinit+0x2c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f5      	bne.n	8000794 <__sinit+0xc>
 80007a8:	f7ff ffc4 	bl	8000734 <global_stdio_init.part.0>
 80007ac:	e7f2      	b.n	8000794 <__sinit+0xc>
 80007ae:	bf00      	nop
 80007b0:	080006f5 	.word	0x080006f5
 80007b4:	200001b4 	.word	0x200001b4

080007b8 <_fwalk_sglue>:
 80007b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007bc:	4607      	mov	r7, r0
 80007be:	4688      	mov	r8, r1
 80007c0:	4614      	mov	r4, r2
 80007c2:	2600      	movs	r6, #0
 80007c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007c8:	f1b9 0901 	subs.w	r9, r9, #1
 80007cc:	d505      	bpl.n	80007da <_fwalk_sglue+0x22>
 80007ce:	6824      	ldr	r4, [r4, #0]
 80007d0:	2c00      	cmp	r4, #0
 80007d2:	d1f7      	bne.n	80007c4 <_fwalk_sglue+0xc>
 80007d4:	4630      	mov	r0, r6
 80007d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007da:	89ab      	ldrh	r3, [r5, #12]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d907      	bls.n	80007f0 <_fwalk_sglue+0x38>
 80007e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007e4:	3301      	adds	r3, #1
 80007e6:	d003      	beq.n	80007f0 <_fwalk_sglue+0x38>
 80007e8:	4629      	mov	r1, r5
 80007ea:	4638      	mov	r0, r7
 80007ec:	47c0      	blx	r8
 80007ee:	4306      	orrs	r6, r0
 80007f0:	3568      	adds	r5, #104	@ 0x68
 80007f2:	e7e9      	b.n	80007c8 <_fwalk_sglue+0x10>

080007f4 <_puts_r>:
 80007f4:	6a03      	ldr	r3, [r0, #32]
 80007f6:	b570      	push	{r4, r5, r6, lr}
 80007f8:	6884      	ldr	r4, [r0, #8]
 80007fa:	4605      	mov	r5, r0
 80007fc:	460e      	mov	r6, r1
 80007fe:	b90b      	cbnz	r3, 8000804 <_puts_r+0x10>
 8000800:	f7ff ffc2 	bl	8000788 <__sinit>
 8000804:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000806:	07db      	lsls	r3, r3, #31
 8000808:	d405      	bmi.n	8000816 <_puts_r+0x22>
 800080a:	89a3      	ldrh	r3, [r4, #12]
 800080c:	0598      	lsls	r0, r3, #22
 800080e:	d402      	bmi.n	8000816 <_puts_r+0x22>
 8000810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000812:	f000 f99e 	bl	8000b52 <__retarget_lock_acquire_recursive>
 8000816:	89a3      	ldrh	r3, [r4, #12]
 8000818:	0719      	lsls	r1, r3, #28
 800081a:	d502      	bpl.n	8000822 <_puts_r+0x2e>
 800081c:	6923      	ldr	r3, [r4, #16]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d135      	bne.n	800088e <_puts_r+0x9a>
 8000822:	4621      	mov	r1, r4
 8000824:	4628      	mov	r0, r5
 8000826:	f000 f8c5 	bl	80009b4 <__swsetup_r>
 800082a:	b380      	cbz	r0, 800088e <_puts_r+0x9a>
 800082c:	f04f 35ff 	mov.w	r5, #4294967295
 8000830:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000832:	07da      	lsls	r2, r3, #31
 8000834:	d405      	bmi.n	8000842 <_puts_r+0x4e>
 8000836:	89a3      	ldrh	r3, [r4, #12]
 8000838:	059b      	lsls	r3, r3, #22
 800083a:	d402      	bmi.n	8000842 <_puts_r+0x4e>
 800083c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800083e:	f000 f989 	bl	8000b54 <__retarget_lock_release_recursive>
 8000842:	4628      	mov	r0, r5
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	2b00      	cmp	r3, #0
 8000848:	da04      	bge.n	8000854 <_puts_r+0x60>
 800084a:	69a2      	ldr	r2, [r4, #24]
 800084c:	429a      	cmp	r2, r3
 800084e:	dc17      	bgt.n	8000880 <_puts_r+0x8c>
 8000850:	290a      	cmp	r1, #10
 8000852:	d015      	beq.n	8000880 <_puts_r+0x8c>
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	6022      	str	r2, [r4, #0]
 800085a:	7019      	strb	r1, [r3, #0]
 800085c:	68a3      	ldr	r3, [r4, #8]
 800085e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000862:	3b01      	subs	r3, #1
 8000864:	60a3      	str	r3, [r4, #8]
 8000866:	2900      	cmp	r1, #0
 8000868:	d1ed      	bne.n	8000846 <_puts_r+0x52>
 800086a:	2b00      	cmp	r3, #0
 800086c:	da11      	bge.n	8000892 <_puts_r+0x9e>
 800086e:	4622      	mov	r2, r4
 8000870:	210a      	movs	r1, #10
 8000872:	4628      	mov	r0, r5
 8000874:	f000 f85f 	bl	8000936 <__swbuf_r>
 8000878:	3001      	adds	r0, #1
 800087a:	d0d7      	beq.n	800082c <_puts_r+0x38>
 800087c:	250a      	movs	r5, #10
 800087e:	e7d7      	b.n	8000830 <_puts_r+0x3c>
 8000880:	4622      	mov	r2, r4
 8000882:	4628      	mov	r0, r5
 8000884:	f000 f857 	bl	8000936 <__swbuf_r>
 8000888:	3001      	adds	r0, #1
 800088a:	d1e7      	bne.n	800085c <_puts_r+0x68>
 800088c:	e7ce      	b.n	800082c <_puts_r+0x38>
 800088e:	3e01      	subs	r6, #1
 8000890:	e7e4      	b.n	800085c <_puts_r+0x68>
 8000892:	6823      	ldr	r3, [r4, #0]
 8000894:	1c5a      	adds	r2, r3, #1
 8000896:	6022      	str	r2, [r4, #0]
 8000898:	220a      	movs	r2, #10
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	e7ee      	b.n	800087c <_puts_r+0x88>
	...

080008a0 <puts>:
 80008a0:	4b02      	ldr	r3, [pc, #8]	@ (80008ac <puts+0xc>)
 80008a2:	4601      	mov	r1, r0
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	f7ff bfa5 	b.w	80007f4 <_puts_r>
 80008aa:	bf00      	nop
 80008ac:	2000000c 	.word	0x2000000c

080008b0 <__sread>:
 80008b0:	b510      	push	{r4, lr}
 80008b2:	460c      	mov	r4, r1
 80008b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008b8:	f000 f8fc 	bl	8000ab4 <_read_r>
 80008bc:	2800      	cmp	r0, #0
 80008be:	bfab      	itete	ge
 80008c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008c2:	89a3      	ldrhlt	r3, [r4, #12]
 80008c4:	181b      	addge	r3, r3, r0
 80008c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008ca:	bfac      	ite	ge
 80008cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008ce:	81a3      	strhlt	r3, [r4, #12]
 80008d0:	bd10      	pop	{r4, pc}

080008d2 <__swrite>:
 80008d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008d6:	461f      	mov	r7, r3
 80008d8:	898b      	ldrh	r3, [r1, #12]
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	4605      	mov	r5, r0
 80008de:	460c      	mov	r4, r1
 80008e0:	4616      	mov	r6, r2
 80008e2:	d505      	bpl.n	80008f0 <__swrite+0x1e>
 80008e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008e8:	2302      	movs	r3, #2
 80008ea:	2200      	movs	r2, #0
 80008ec:	f000 f8d0 	bl	8000a90 <_lseek_r>
 80008f0:	89a3      	ldrh	r3, [r4, #12]
 80008f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008fa:	81a3      	strh	r3, [r4, #12]
 80008fc:	4632      	mov	r2, r6
 80008fe:	463b      	mov	r3, r7
 8000900:	4628      	mov	r0, r5
 8000902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000906:	f000 b8e7 	b.w	8000ad8 <_write_r>

0800090a <__sseek>:
 800090a:	b510      	push	{r4, lr}
 800090c:	460c      	mov	r4, r1
 800090e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000912:	f000 f8bd 	bl	8000a90 <_lseek_r>
 8000916:	1c43      	adds	r3, r0, #1
 8000918:	89a3      	ldrh	r3, [r4, #12]
 800091a:	bf15      	itete	ne
 800091c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800091e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000922:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000926:	81a3      	strheq	r3, [r4, #12]
 8000928:	bf18      	it	ne
 800092a:	81a3      	strhne	r3, [r4, #12]
 800092c:	bd10      	pop	{r4, pc}

0800092e <__sclose>:
 800092e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000932:	f000 b89d 	b.w	8000a70 <_close_r>

08000936 <__swbuf_r>:
 8000936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000938:	460e      	mov	r6, r1
 800093a:	4614      	mov	r4, r2
 800093c:	4605      	mov	r5, r0
 800093e:	b118      	cbz	r0, 8000948 <__swbuf_r+0x12>
 8000940:	6a03      	ldr	r3, [r0, #32]
 8000942:	b90b      	cbnz	r3, 8000948 <__swbuf_r+0x12>
 8000944:	f7ff ff20 	bl	8000788 <__sinit>
 8000948:	69a3      	ldr	r3, [r4, #24]
 800094a:	60a3      	str	r3, [r4, #8]
 800094c:	89a3      	ldrh	r3, [r4, #12]
 800094e:	071a      	lsls	r2, r3, #28
 8000950:	d501      	bpl.n	8000956 <__swbuf_r+0x20>
 8000952:	6923      	ldr	r3, [r4, #16]
 8000954:	b943      	cbnz	r3, 8000968 <__swbuf_r+0x32>
 8000956:	4621      	mov	r1, r4
 8000958:	4628      	mov	r0, r5
 800095a:	f000 f82b 	bl	80009b4 <__swsetup_r>
 800095e:	b118      	cbz	r0, 8000968 <__swbuf_r+0x32>
 8000960:	f04f 37ff 	mov.w	r7, #4294967295
 8000964:	4638      	mov	r0, r7
 8000966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000968:	6823      	ldr	r3, [r4, #0]
 800096a:	6922      	ldr	r2, [r4, #16]
 800096c:	1a98      	subs	r0, r3, r2
 800096e:	6963      	ldr	r3, [r4, #20]
 8000970:	b2f6      	uxtb	r6, r6
 8000972:	4283      	cmp	r3, r0
 8000974:	4637      	mov	r7, r6
 8000976:	dc05      	bgt.n	8000984 <__swbuf_r+0x4e>
 8000978:	4621      	mov	r1, r4
 800097a:	4628      	mov	r0, r5
 800097c:	f000 fa64 	bl	8000e48 <_fflush_r>
 8000980:	2800      	cmp	r0, #0
 8000982:	d1ed      	bne.n	8000960 <__swbuf_r+0x2a>
 8000984:	68a3      	ldr	r3, [r4, #8]
 8000986:	3b01      	subs	r3, #1
 8000988:	60a3      	str	r3, [r4, #8]
 800098a:	6823      	ldr	r3, [r4, #0]
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	6022      	str	r2, [r4, #0]
 8000990:	701e      	strb	r6, [r3, #0]
 8000992:	6962      	ldr	r2, [r4, #20]
 8000994:	1c43      	adds	r3, r0, #1
 8000996:	429a      	cmp	r2, r3
 8000998:	d004      	beq.n	80009a4 <__swbuf_r+0x6e>
 800099a:	89a3      	ldrh	r3, [r4, #12]
 800099c:	07db      	lsls	r3, r3, #31
 800099e:	d5e1      	bpl.n	8000964 <__swbuf_r+0x2e>
 80009a0:	2e0a      	cmp	r6, #10
 80009a2:	d1df      	bne.n	8000964 <__swbuf_r+0x2e>
 80009a4:	4621      	mov	r1, r4
 80009a6:	4628      	mov	r0, r5
 80009a8:	f000 fa4e 	bl	8000e48 <_fflush_r>
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d0d9      	beq.n	8000964 <__swbuf_r+0x2e>
 80009b0:	e7d6      	b.n	8000960 <__swbuf_r+0x2a>
	...

080009b4 <__swsetup_r>:
 80009b4:	b538      	push	{r3, r4, r5, lr}
 80009b6:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <__swsetup_r+0xa8>)
 80009b8:	4605      	mov	r5, r0
 80009ba:	6818      	ldr	r0, [r3, #0]
 80009bc:	460c      	mov	r4, r1
 80009be:	b118      	cbz	r0, 80009c8 <__swsetup_r+0x14>
 80009c0:	6a03      	ldr	r3, [r0, #32]
 80009c2:	b90b      	cbnz	r3, 80009c8 <__swsetup_r+0x14>
 80009c4:	f7ff fee0 	bl	8000788 <__sinit>
 80009c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009cc:	0719      	lsls	r1, r3, #28
 80009ce:	d422      	bmi.n	8000a16 <__swsetup_r+0x62>
 80009d0:	06da      	lsls	r2, r3, #27
 80009d2:	d407      	bmi.n	80009e4 <__swsetup_r+0x30>
 80009d4:	2209      	movs	r2, #9
 80009d6:	602a      	str	r2, [r5, #0]
 80009d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009dc:	81a3      	strh	r3, [r4, #12]
 80009de:	f04f 30ff 	mov.w	r0, #4294967295
 80009e2:	e033      	b.n	8000a4c <__swsetup_r+0x98>
 80009e4:	0758      	lsls	r0, r3, #29
 80009e6:	d512      	bpl.n	8000a0e <__swsetup_r+0x5a>
 80009e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80009ea:	b141      	cbz	r1, 80009fe <__swsetup_r+0x4a>
 80009ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80009f0:	4299      	cmp	r1, r3
 80009f2:	d002      	beq.n	80009fa <__swsetup_r+0x46>
 80009f4:	4628      	mov	r0, r5
 80009f6:	f000 f8af 	bl	8000b58 <_free_r>
 80009fa:	2300      	movs	r3, #0
 80009fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80009fe:	89a3      	ldrh	r3, [r4, #12]
 8000a00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000a04:	81a3      	strh	r3, [r4, #12]
 8000a06:	2300      	movs	r3, #0
 8000a08:	6063      	str	r3, [r4, #4]
 8000a0a:	6923      	ldr	r3, [r4, #16]
 8000a0c:	6023      	str	r3, [r4, #0]
 8000a0e:	89a3      	ldrh	r3, [r4, #12]
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	81a3      	strh	r3, [r4, #12]
 8000a16:	6923      	ldr	r3, [r4, #16]
 8000a18:	b94b      	cbnz	r3, 8000a2e <__swsetup_r+0x7a>
 8000a1a:	89a3      	ldrh	r3, [r4, #12]
 8000a1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a24:	d003      	beq.n	8000a2e <__swsetup_r+0x7a>
 8000a26:	4621      	mov	r1, r4
 8000a28:	4628      	mov	r0, r5
 8000a2a:	f000 fa5b 	bl	8000ee4 <__smakebuf_r>
 8000a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a32:	f013 0201 	ands.w	r2, r3, #1
 8000a36:	d00a      	beq.n	8000a4e <__swsetup_r+0x9a>
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60a2      	str	r2, [r4, #8]
 8000a3c:	6962      	ldr	r2, [r4, #20]
 8000a3e:	4252      	negs	r2, r2
 8000a40:	61a2      	str	r2, [r4, #24]
 8000a42:	6922      	ldr	r2, [r4, #16]
 8000a44:	b942      	cbnz	r2, 8000a58 <__swsetup_r+0xa4>
 8000a46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000a4a:	d1c5      	bne.n	80009d8 <__swsetup_r+0x24>
 8000a4c:	bd38      	pop	{r3, r4, r5, pc}
 8000a4e:	0799      	lsls	r1, r3, #30
 8000a50:	bf58      	it	pl
 8000a52:	6962      	ldrpl	r2, [r4, #20]
 8000a54:	60a2      	str	r2, [r4, #8]
 8000a56:	e7f4      	b.n	8000a42 <__swsetup_r+0x8e>
 8000a58:	2000      	movs	r0, #0
 8000a5a:	e7f7      	b.n	8000a4c <__swsetup_r+0x98>
 8000a5c:	2000000c 	.word	0x2000000c

08000a60 <memset>:
 8000a60:	4402      	add	r2, r0
 8000a62:	4603      	mov	r3, r0
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d100      	bne.n	8000a6a <memset+0xa>
 8000a68:	4770      	bx	lr
 8000a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a6e:	e7f9      	b.n	8000a64 <memset+0x4>

08000a70 <_close_r>:
 8000a70:	b538      	push	{r3, r4, r5, lr}
 8000a72:	4d06      	ldr	r5, [pc, #24]	@ (8000a8c <_close_r+0x1c>)
 8000a74:	2300      	movs	r3, #0
 8000a76:	4604      	mov	r4, r0
 8000a78:	4608      	mov	r0, r1
 8000a7a:	602b      	str	r3, [r5, #0]
 8000a7c:	f7ff fd67 	bl	800054e <_close>
 8000a80:	1c43      	adds	r3, r0, #1
 8000a82:	d102      	bne.n	8000a8a <_close_r+0x1a>
 8000a84:	682b      	ldr	r3, [r5, #0]
 8000a86:	b103      	cbz	r3, 8000a8a <_close_r+0x1a>
 8000a88:	6023      	str	r3, [r4, #0]
 8000a8a:	bd38      	pop	{r3, r4, r5, pc}
 8000a8c:	200001b8 	.word	0x200001b8

08000a90 <_lseek_r>:
 8000a90:	b538      	push	{r3, r4, r5, lr}
 8000a92:	4d07      	ldr	r5, [pc, #28]	@ (8000ab0 <_lseek_r+0x20>)
 8000a94:	4604      	mov	r4, r0
 8000a96:	4608      	mov	r0, r1
 8000a98:	4611      	mov	r1, r2
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	602a      	str	r2, [r5, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	f7ff fd79 	bl	8000596 <_lseek>
 8000aa4:	1c43      	adds	r3, r0, #1
 8000aa6:	d102      	bne.n	8000aae <_lseek_r+0x1e>
 8000aa8:	682b      	ldr	r3, [r5, #0]
 8000aaa:	b103      	cbz	r3, 8000aae <_lseek_r+0x1e>
 8000aac:	6023      	str	r3, [r4, #0]
 8000aae:	bd38      	pop	{r3, r4, r5, pc}
 8000ab0:	200001b8 	.word	0x200001b8

08000ab4 <_read_r>:
 8000ab4:	b538      	push	{r3, r4, r5, lr}
 8000ab6:	4d07      	ldr	r5, [pc, #28]	@ (8000ad4 <_read_r+0x20>)
 8000ab8:	4604      	mov	r4, r0
 8000aba:	4608      	mov	r0, r1
 8000abc:	4611      	mov	r1, r2
 8000abe:	2200      	movs	r2, #0
 8000ac0:	602a      	str	r2, [r5, #0]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	f7ff fd0a 	bl	80004dc <_read>
 8000ac8:	1c43      	adds	r3, r0, #1
 8000aca:	d102      	bne.n	8000ad2 <_read_r+0x1e>
 8000acc:	682b      	ldr	r3, [r5, #0]
 8000ace:	b103      	cbz	r3, 8000ad2 <_read_r+0x1e>
 8000ad0:	6023      	str	r3, [r4, #0]
 8000ad2:	bd38      	pop	{r3, r4, r5, pc}
 8000ad4:	200001b8 	.word	0x200001b8

08000ad8 <_write_r>:
 8000ad8:	b538      	push	{r3, r4, r5, lr}
 8000ada:	4d07      	ldr	r5, [pc, #28]	@ (8000af8 <_write_r+0x20>)
 8000adc:	4604      	mov	r4, r0
 8000ade:	4608      	mov	r0, r1
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	602a      	str	r2, [r5, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	f7ff fd15 	bl	8000516 <_write>
 8000aec:	1c43      	adds	r3, r0, #1
 8000aee:	d102      	bne.n	8000af6 <_write_r+0x1e>
 8000af0:	682b      	ldr	r3, [r5, #0]
 8000af2:	b103      	cbz	r3, 8000af6 <_write_r+0x1e>
 8000af4:	6023      	str	r3, [r4, #0]
 8000af6:	bd38      	pop	{r3, r4, r5, pc}
 8000af8:	200001b8 	.word	0x200001b8

08000afc <__errno>:
 8000afc:	4b01      	ldr	r3, [pc, #4]	@ (8000b04 <__errno+0x8>)
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	2000000c 	.word	0x2000000c

08000b08 <__libc_init_array>:
 8000b08:	b570      	push	{r4, r5, r6, lr}
 8000b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8000b40 <__libc_init_array+0x38>)
 8000b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8000b44 <__libc_init_array+0x3c>)
 8000b0e:	1b64      	subs	r4, r4, r5
 8000b10:	10a4      	asrs	r4, r4, #2
 8000b12:	2600      	movs	r6, #0
 8000b14:	42a6      	cmp	r6, r4
 8000b16:	d109      	bne.n	8000b2c <__libc_init_array+0x24>
 8000b18:	4d0b      	ldr	r5, [pc, #44]	@ (8000b48 <__libc_init_array+0x40>)
 8000b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8000b4c <__libc_init_array+0x44>)
 8000b1c:	f000 fa50 	bl	8000fc0 <_init>
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	10a4      	asrs	r4, r4, #2
 8000b24:	2600      	movs	r6, #0
 8000b26:	42a6      	cmp	r6, r4
 8000b28:	d105      	bne.n	8000b36 <__libc_init_array+0x2e>
 8000b2a:	bd70      	pop	{r4, r5, r6, pc}
 8000b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b30:	4798      	blx	r3
 8000b32:	3601      	adds	r6, #1
 8000b34:	e7ee      	b.n	8000b14 <__libc_init_array+0xc>
 8000b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b3a:	4798      	blx	r3
 8000b3c:	3601      	adds	r6, #1
 8000b3e:	e7f2      	b.n	8000b26 <__libc_init_array+0x1e>
 8000b40:	08001018 	.word	0x08001018
 8000b44:	08001018 	.word	0x08001018
 8000b48:	08001018 	.word	0x08001018
 8000b4c:	0800101c 	.word	0x0800101c

08000b50 <__retarget_lock_init_recursive>:
 8000b50:	4770      	bx	lr

08000b52 <__retarget_lock_acquire_recursive>:
 8000b52:	4770      	bx	lr

08000b54 <__retarget_lock_release_recursive>:
 8000b54:	4770      	bx	lr
	...

08000b58 <_free_r>:
 8000b58:	b538      	push	{r3, r4, r5, lr}
 8000b5a:	4605      	mov	r5, r0
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d041      	beq.n	8000be4 <_free_r+0x8c>
 8000b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b64:	1f0c      	subs	r4, r1, #4
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	bfb8      	it	lt
 8000b6a:	18e4      	addlt	r4, r4, r3
 8000b6c:	f000 f8e0 	bl	8000d30 <__malloc_lock>
 8000b70:	4a1d      	ldr	r2, [pc, #116]	@ (8000be8 <_free_r+0x90>)
 8000b72:	6813      	ldr	r3, [r2, #0]
 8000b74:	b933      	cbnz	r3, 8000b84 <_free_r+0x2c>
 8000b76:	6063      	str	r3, [r4, #4]
 8000b78:	6014      	str	r4, [r2, #0]
 8000b7a:	4628      	mov	r0, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b8dc 	b.w	8000d3c <__malloc_unlock>
 8000b84:	42a3      	cmp	r3, r4
 8000b86:	d908      	bls.n	8000b9a <_free_r+0x42>
 8000b88:	6820      	ldr	r0, [r4, #0]
 8000b8a:	1821      	adds	r1, r4, r0
 8000b8c:	428b      	cmp	r3, r1
 8000b8e:	bf01      	itttt	eq
 8000b90:	6819      	ldreq	r1, [r3, #0]
 8000b92:	685b      	ldreq	r3, [r3, #4]
 8000b94:	1809      	addeq	r1, r1, r0
 8000b96:	6021      	streq	r1, [r4, #0]
 8000b98:	e7ed      	b.n	8000b76 <_free_r+0x1e>
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	b10b      	cbz	r3, 8000ba4 <_free_r+0x4c>
 8000ba0:	42a3      	cmp	r3, r4
 8000ba2:	d9fa      	bls.n	8000b9a <_free_r+0x42>
 8000ba4:	6811      	ldr	r1, [r2, #0]
 8000ba6:	1850      	adds	r0, r2, r1
 8000ba8:	42a0      	cmp	r0, r4
 8000baa:	d10b      	bne.n	8000bc4 <_free_r+0x6c>
 8000bac:	6820      	ldr	r0, [r4, #0]
 8000bae:	4401      	add	r1, r0
 8000bb0:	1850      	adds	r0, r2, r1
 8000bb2:	4283      	cmp	r3, r0
 8000bb4:	6011      	str	r1, [r2, #0]
 8000bb6:	d1e0      	bne.n	8000b7a <_free_r+0x22>
 8000bb8:	6818      	ldr	r0, [r3, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	6053      	str	r3, [r2, #4]
 8000bbe:	4408      	add	r0, r1
 8000bc0:	6010      	str	r0, [r2, #0]
 8000bc2:	e7da      	b.n	8000b7a <_free_r+0x22>
 8000bc4:	d902      	bls.n	8000bcc <_free_r+0x74>
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	602b      	str	r3, [r5, #0]
 8000bca:	e7d6      	b.n	8000b7a <_free_r+0x22>
 8000bcc:	6820      	ldr	r0, [r4, #0]
 8000bce:	1821      	adds	r1, r4, r0
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	bf04      	itt	eq
 8000bd4:	6819      	ldreq	r1, [r3, #0]
 8000bd6:	685b      	ldreq	r3, [r3, #4]
 8000bd8:	6063      	str	r3, [r4, #4]
 8000bda:	bf04      	itt	eq
 8000bdc:	1809      	addeq	r1, r1, r0
 8000bde:	6021      	streq	r1, [r4, #0]
 8000be0:	6054      	str	r4, [r2, #4]
 8000be2:	e7ca      	b.n	8000b7a <_free_r+0x22>
 8000be4:	bd38      	pop	{r3, r4, r5, pc}
 8000be6:	bf00      	nop
 8000be8:	200001c4 	.word	0x200001c4

08000bec <sbrk_aligned>:
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	4e0f      	ldr	r6, [pc, #60]	@ (8000c2c <sbrk_aligned+0x40>)
 8000bf0:	460c      	mov	r4, r1
 8000bf2:	6831      	ldr	r1, [r6, #0]
 8000bf4:	4605      	mov	r5, r0
 8000bf6:	b911      	cbnz	r1, 8000bfe <sbrk_aligned+0x12>
 8000bf8:	f000 f9d2 	bl	8000fa0 <_sbrk_r>
 8000bfc:	6030      	str	r0, [r6, #0]
 8000bfe:	4621      	mov	r1, r4
 8000c00:	4628      	mov	r0, r5
 8000c02:	f000 f9cd 	bl	8000fa0 <_sbrk_r>
 8000c06:	1c43      	adds	r3, r0, #1
 8000c08:	d103      	bne.n	8000c12 <sbrk_aligned+0x26>
 8000c0a:	f04f 34ff 	mov.w	r4, #4294967295
 8000c0e:	4620      	mov	r0, r4
 8000c10:	bd70      	pop	{r4, r5, r6, pc}
 8000c12:	1cc4      	adds	r4, r0, #3
 8000c14:	f024 0403 	bic.w	r4, r4, #3
 8000c18:	42a0      	cmp	r0, r4
 8000c1a:	d0f8      	beq.n	8000c0e <sbrk_aligned+0x22>
 8000c1c:	1a21      	subs	r1, r4, r0
 8000c1e:	4628      	mov	r0, r5
 8000c20:	f000 f9be 	bl	8000fa0 <_sbrk_r>
 8000c24:	3001      	adds	r0, #1
 8000c26:	d1f2      	bne.n	8000c0e <sbrk_aligned+0x22>
 8000c28:	e7ef      	b.n	8000c0a <sbrk_aligned+0x1e>
 8000c2a:	bf00      	nop
 8000c2c:	200001c0 	.word	0x200001c0

08000c30 <_malloc_r>:
 8000c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c34:	1ccd      	adds	r5, r1, #3
 8000c36:	f025 0503 	bic.w	r5, r5, #3
 8000c3a:	3508      	adds	r5, #8
 8000c3c:	2d0c      	cmp	r5, #12
 8000c3e:	bf38      	it	cc
 8000c40:	250c      	movcc	r5, #12
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	4606      	mov	r6, r0
 8000c46:	db01      	blt.n	8000c4c <_malloc_r+0x1c>
 8000c48:	42a9      	cmp	r1, r5
 8000c4a:	d904      	bls.n	8000c56 <_malloc_r+0x26>
 8000c4c:	230c      	movs	r3, #12
 8000c4e:	6033      	str	r3, [r6, #0]
 8000c50:	2000      	movs	r0, #0
 8000c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d2c <_malloc_r+0xfc>
 8000c5a:	f000 f869 	bl	8000d30 <__malloc_lock>
 8000c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c62:	461c      	mov	r4, r3
 8000c64:	bb44      	cbnz	r4, 8000cb8 <_malloc_r+0x88>
 8000c66:	4629      	mov	r1, r5
 8000c68:	4630      	mov	r0, r6
 8000c6a:	f7ff ffbf 	bl	8000bec <sbrk_aligned>
 8000c6e:	1c43      	adds	r3, r0, #1
 8000c70:	4604      	mov	r4, r0
 8000c72:	d158      	bne.n	8000d26 <_malloc_r+0xf6>
 8000c74:	f8d8 4000 	ldr.w	r4, [r8]
 8000c78:	4627      	mov	r7, r4
 8000c7a:	2f00      	cmp	r7, #0
 8000c7c:	d143      	bne.n	8000d06 <_malloc_r+0xd6>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d04b      	beq.n	8000d1a <_malloc_r+0xea>
 8000c82:	6823      	ldr	r3, [r4, #0]
 8000c84:	4639      	mov	r1, r7
 8000c86:	4630      	mov	r0, r6
 8000c88:	eb04 0903 	add.w	r9, r4, r3
 8000c8c:	f000 f988 	bl	8000fa0 <_sbrk_r>
 8000c90:	4581      	cmp	r9, r0
 8000c92:	d142      	bne.n	8000d1a <_malloc_r+0xea>
 8000c94:	6821      	ldr	r1, [r4, #0]
 8000c96:	1a6d      	subs	r5, r5, r1
 8000c98:	4629      	mov	r1, r5
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	f7ff ffa6 	bl	8000bec <sbrk_aligned>
 8000ca0:	3001      	adds	r0, #1
 8000ca2:	d03a      	beq.n	8000d1a <_malloc_r+0xea>
 8000ca4:	6823      	ldr	r3, [r4, #0]
 8000ca6:	442b      	add	r3, r5
 8000ca8:	6023      	str	r3, [r4, #0]
 8000caa:	f8d8 3000 	ldr.w	r3, [r8]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	bb62      	cbnz	r2, 8000d0c <_malloc_r+0xdc>
 8000cb2:	f8c8 7000 	str.w	r7, [r8]
 8000cb6:	e00f      	b.n	8000cd8 <_malloc_r+0xa8>
 8000cb8:	6822      	ldr	r2, [r4, #0]
 8000cba:	1b52      	subs	r2, r2, r5
 8000cbc:	d420      	bmi.n	8000d00 <_malloc_r+0xd0>
 8000cbe:	2a0b      	cmp	r2, #11
 8000cc0:	d917      	bls.n	8000cf2 <_malloc_r+0xc2>
 8000cc2:	1961      	adds	r1, r4, r5
 8000cc4:	42a3      	cmp	r3, r4
 8000cc6:	6025      	str	r5, [r4, #0]
 8000cc8:	bf18      	it	ne
 8000cca:	6059      	strne	r1, [r3, #4]
 8000ccc:	6863      	ldr	r3, [r4, #4]
 8000cce:	bf08      	it	eq
 8000cd0:	f8c8 1000 	streq.w	r1, [r8]
 8000cd4:	5162      	str	r2, [r4, r5]
 8000cd6:	604b      	str	r3, [r1, #4]
 8000cd8:	4630      	mov	r0, r6
 8000cda:	f000 f82f 	bl	8000d3c <__malloc_unlock>
 8000cde:	f104 000b 	add.w	r0, r4, #11
 8000ce2:	1d23      	adds	r3, r4, #4
 8000ce4:	f020 0007 	bic.w	r0, r0, #7
 8000ce8:	1ac2      	subs	r2, r0, r3
 8000cea:	bf1c      	itt	ne
 8000cec:	1a1b      	subne	r3, r3, r0
 8000cee:	50a3      	strne	r3, [r4, r2]
 8000cf0:	e7af      	b.n	8000c52 <_malloc_r+0x22>
 8000cf2:	6862      	ldr	r2, [r4, #4]
 8000cf4:	42a3      	cmp	r3, r4
 8000cf6:	bf0c      	ite	eq
 8000cf8:	f8c8 2000 	streq.w	r2, [r8]
 8000cfc:	605a      	strne	r2, [r3, #4]
 8000cfe:	e7eb      	b.n	8000cd8 <_malloc_r+0xa8>
 8000d00:	4623      	mov	r3, r4
 8000d02:	6864      	ldr	r4, [r4, #4]
 8000d04:	e7ae      	b.n	8000c64 <_malloc_r+0x34>
 8000d06:	463c      	mov	r4, r7
 8000d08:	687f      	ldr	r7, [r7, #4]
 8000d0a:	e7b6      	b.n	8000c7a <_malloc_r+0x4a>
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	42a3      	cmp	r3, r4
 8000d12:	d1fb      	bne.n	8000d0c <_malloc_r+0xdc>
 8000d14:	2300      	movs	r3, #0
 8000d16:	6053      	str	r3, [r2, #4]
 8000d18:	e7de      	b.n	8000cd8 <_malloc_r+0xa8>
 8000d1a:	230c      	movs	r3, #12
 8000d1c:	6033      	str	r3, [r6, #0]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	f000 f80c 	bl	8000d3c <__malloc_unlock>
 8000d24:	e794      	b.n	8000c50 <_malloc_r+0x20>
 8000d26:	6005      	str	r5, [r0, #0]
 8000d28:	e7d6      	b.n	8000cd8 <_malloc_r+0xa8>
 8000d2a:	bf00      	nop
 8000d2c:	200001c4 	.word	0x200001c4

08000d30 <__malloc_lock>:
 8000d30:	4801      	ldr	r0, [pc, #4]	@ (8000d38 <__malloc_lock+0x8>)
 8000d32:	f7ff bf0e 	b.w	8000b52 <__retarget_lock_acquire_recursive>
 8000d36:	bf00      	nop
 8000d38:	200001bc 	.word	0x200001bc

08000d3c <__malloc_unlock>:
 8000d3c:	4801      	ldr	r0, [pc, #4]	@ (8000d44 <__malloc_unlock+0x8>)
 8000d3e:	f7ff bf09 	b.w	8000b54 <__retarget_lock_release_recursive>
 8000d42:	bf00      	nop
 8000d44:	200001bc 	.word	0x200001bc

08000d48 <__sflush_r>:
 8000d48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4e:	0716      	lsls	r6, r2, #28
 8000d50:	4605      	mov	r5, r0
 8000d52:	460c      	mov	r4, r1
 8000d54:	d454      	bmi.n	8000e00 <__sflush_r+0xb8>
 8000d56:	684b      	ldr	r3, [r1, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	dc02      	bgt.n	8000d62 <__sflush_r+0x1a>
 8000d5c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	dd48      	ble.n	8000df4 <__sflush_r+0xac>
 8000d62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d045      	beq.n	8000df4 <__sflush_r+0xac>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000d6e:	682f      	ldr	r7, [r5, #0]
 8000d70:	6a21      	ldr	r1, [r4, #32]
 8000d72:	602b      	str	r3, [r5, #0]
 8000d74:	d030      	beq.n	8000dd8 <__sflush_r+0x90>
 8000d76:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000d78:	89a3      	ldrh	r3, [r4, #12]
 8000d7a:	0759      	lsls	r1, r3, #29
 8000d7c:	d505      	bpl.n	8000d8a <__sflush_r+0x42>
 8000d7e:	6863      	ldr	r3, [r4, #4]
 8000d80:	1ad2      	subs	r2, r2, r3
 8000d82:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000d84:	b10b      	cbz	r3, 8000d8a <__sflush_r+0x42>
 8000d86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d88:	1ad2      	subs	r2, r2, r3
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d8e:	6a21      	ldr	r1, [r4, #32]
 8000d90:	4628      	mov	r0, r5
 8000d92:	47b0      	blx	r6
 8000d94:	1c43      	adds	r3, r0, #1
 8000d96:	89a3      	ldrh	r3, [r4, #12]
 8000d98:	d106      	bne.n	8000da8 <__sflush_r+0x60>
 8000d9a:	6829      	ldr	r1, [r5, #0]
 8000d9c:	291d      	cmp	r1, #29
 8000d9e:	d82b      	bhi.n	8000df8 <__sflush_r+0xb0>
 8000da0:	4a28      	ldr	r2, [pc, #160]	@ (8000e44 <__sflush_r+0xfc>)
 8000da2:	410a      	asrs	r2, r1
 8000da4:	07d6      	lsls	r6, r2, #31
 8000da6:	d427      	bmi.n	8000df8 <__sflush_r+0xb0>
 8000da8:	2200      	movs	r2, #0
 8000daa:	6062      	str	r2, [r4, #4]
 8000dac:	04d9      	lsls	r1, r3, #19
 8000dae:	6922      	ldr	r2, [r4, #16]
 8000db0:	6022      	str	r2, [r4, #0]
 8000db2:	d504      	bpl.n	8000dbe <__sflush_r+0x76>
 8000db4:	1c42      	adds	r2, r0, #1
 8000db6:	d101      	bne.n	8000dbc <__sflush_r+0x74>
 8000db8:	682b      	ldr	r3, [r5, #0]
 8000dba:	b903      	cbnz	r3, 8000dbe <__sflush_r+0x76>
 8000dbc:	6560      	str	r0, [r4, #84]	@ 0x54
 8000dbe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000dc0:	602f      	str	r7, [r5, #0]
 8000dc2:	b1b9      	cbz	r1, 8000df4 <__sflush_r+0xac>
 8000dc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d002      	beq.n	8000dd2 <__sflush_r+0x8a>
 8000dcc:	4628      	mov	r0, r5
 8000dce:	f7ff fec3 	bl	8000b58 <_free_r>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8000dd6:	e00d      	b.n	8000df4 <__sflush_r+0xac>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	4628      	mov	r0, r5
 8000ddc:	47b0      	blx	r6
 8000dde:	4602      	mov	r2, r0
 8000de0:	1c50      	adds	r0, r2, #1
 8000de2:	d1c9      	bne.n	8000d78 <__sflush_r+0x30>
 8000de4:	682b      	ldr	r3, [r5, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0c6      	beq.n	8000d78 <__sflush_r+0x30>
 8000dea:	2b1d      	cmp	r3, #29
 8000dec:	d001      	beq.n	8000df2 <__sflush_r+0xaa>
 8000dee:	2b16      	cmp	r3, #22
 8000df0:	d11d      	bne.n	8000e2e <__sflush_r+0xe6>
 8000df2:	602f      	str	r7, [r5, #0]
 8000df4:	2000      	movs	r0, #0
 8000df6:	e021      	b.n	8000e3c <__sflush_r+0xf4>
 8000df8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	e01a      	b.n	8000e36 <__sflush_r+0xee>
 8000e00:	690f      	ldr	r7, [r1, #16]
 8000e02:	2f00      	cmp	r7, #0
 8000e04:	d0f6      	beq.n	8000df4 <__sflush_r+0xac>
 8000e06:	0793      	lsls	r3, r2, #30
 8000e08:	680e      	ldr	r6, [r1, #0]
 8000e0a:	bf08      	it	eq
 8000e0c:	694b      	ldreq	r3, [r1, #20]
 8000e0e:	600f      	str	r7, [r1, #0]
 8000e10:	bf18      	it	ne
 8000e12:	2300      	movne	r3, #0
 8000e14:	1bf6      	subs	r6, r6, r7
 8000e16:	608b      	str	r3, [r1, #8]
 8000e18:	2e00      	cmp	r6, #0
 8000e1a:	ddeb      	ble.n	8000df4 <__sflush_r+0xac>
 8000e1c:	6a21      	ldr	r1, [r4, #32]
 8000e1e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000e22:	4633      	mov	r3, r6
 8000e24:	463a      	mov	r2, r7
 8000e26:	4628      	mov	r0, r5
 8000e28:	47e0      	blx	ip
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	dc07      	bgt.n	8000e3e <__sflush_r+0xf6>
 8000e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e36:	81a3      	strh	r3, [r4, #12]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e3e:	4407      	add	r7, r0
 8000e40:	1a36      	subs	r6, r6, r0
 8000e42:	e7e9      	b.n	8000e18 <__sflush_r+0xd0>
 8000e44:	dfbffffe 	.word	0xdfbffffe

08000e48 <_fflush_r>:
 8000e48:	b538      	push	{r3, r4, r5, lr}
 8000e4a:	690b      	ldr	r3, [r1, #16]
 8000e4c:	4605      	mov	r5, r0
 8000e4e:	460c      	mov	r4, r1
 8000e50:	b913      	cbnz	r3, 8000e58 <_fflush_r+0x10>
 8000e52:	2500      	movs	r5, #0
 8000e54:	4628      	mov	r0, r5
 8000e56:	bd38      	pop	{r3, r4, r5, pc}
 8000e58:	b118      	cbz	r0, 8000e62 <_fflush_r+0x1a>
 8000e5a:	6a03      	ldr	r3, [r0, #32]
 8000e5c:	b90b      	cbnz	r3, 8000e62 <_fflush_r+0x1a>
 8000e5e:	f7ff fc93 	bl	8000788 <__sinit>
 8000e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f3      	beq.n	8000e52 <_fflush_r+0xa>
 8000e6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000e6c:	07d0      	lsls	r0, r2, #31
 8000e6e:	d404      	bmi.n	8000e7a <_fflush_r+0x32>
 8000e70:	0599      	lsls	r1, r3, #22
 8000e72:	d402      	bmi.n	8000e7a <_fflush_r+0x32>
 8000e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e76:	f7ff fe6c 	bl	8000b52 <__retarget_lock_acquire_recursive>
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	f7ff ff63 	bl	8000d48 <__sflush_r>
 8000e82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000e84:	07da      	lsls	r2, r3, #31
 8000e86:	4605      	mov	r5, r0
 8000e88:	d4e4      	bmi.n	8000e54 <_fflush_r+0xc>
 8000e8a:	89a3      	ldrh	r3, [r4, #12]
 8000e8c:	059b      	lsls	r3, r3, #22
 8000e8e:	d4e1      	bmi.n	8000e54 <_fflush_r+0xc>
 8000e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e92:	f7ff fe5f 	bl	8000b54 <__retarget_lock_release_recursive>
 8000e96:	e7dd      	b.n	8000e54 <_fflush_r+0xc>

08000e98 <__swhatbuf_r>:
 8000e98:	b570      	push	{r4, r5, r6, lr}
 8000e9a:	460c      	mov	r4, r1
 8000e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ea0:	2900      	cmp	r1, #0
 8000ea2:	b096      	sub	sp, #88	@ 0x58
 8000ea4:	4615      	mov	r5, r2
 8000ea6:	461e      	mov	r6, r3
 8000ea8:	da0d      	bge.n	8000ec6 <__swhatbuf_r+0x2e>
 8000eaa:	89a3      	ldrh	r3, [r4, #12]
 8000eac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000eb0:	f04f 0100 	mov.w	r1, #0
 8000eb4:	bf14      	ite	ne
 8000eb6:	2340      	movne	r3, #64	@ 0x40
 8000eb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	6031      	str	r1, [r6, #0]
 8000ec0:	602b      	str	r3, [r5, #0]
 8000ec2:	b016      	add	sp, #88	@ 0x58
 8000ec4:	bd70      	pop	{r4, r5, r6, pc}
 8000ec6:	466a      	mov	r2, sp
 8000ec8:	f000 f848 	bl	8000f5c <_fstat_r>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	dbec      	blt.n	8000eaa <__swhatbuf_r+0x12>
 8000ed0:	9901      	ldr	r1, [sp, #4]
 8000ed2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000ed6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000eda:	4259      	negs	r1, r3
 8000edc:	4159      	adcs	r1, r3
 8000ede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ee2:	e7eb      	b.n	8000ebc <__swhatbuf_r+0x24>

08000ee4 <__smakebuf_r>:
 8000ee4:	898b      	ldrh	r3, [r1, #12]
 8000ee6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ee8:	079d      	lsls	r5, r3, #30
 8000eea:	4606      	mov	r6, r0
 8000eec:	460c      	mov	r4, r1
 8000eee:	d507      	bpl.n	8000f00 <__smakebuf_r+0x1c>
 8000ef0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000ef4:	6023      	str	r3, [r4, #0]
 8000ef6:	6123      	str	r3, [r4, #16]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	6163      	str	r3, [r4, #20]
 8000efc:	b003      	add	sp, #12
 8000efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f00:	ab01      	add	r3, sp, #4
 8000f02:	466a      	mov	r2, sp
 8000f04:	f7ff ffc8 	bl	8000e98 <__swhatbuf_r>
 8000f08:	9f00      	ldr	r7, [sp, #0]
 8000f0a:	4605      	mov	r5, r0
 8000f0c:	4639      	mov	r1, r7
 8000f0e:	4630      	mov	r0, r6
 8000f10:	f7ff fe8e 	bl	8000c30 <_malloc_r>
 8000f14:	b948      	cbnz	r0, 8000f2a <__smakebuf_r+0x46>
 8000f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f1a:	059a      	lsls	r2, r3, #22
 8000f1c:	d4ee      	bmi.n	8000efc <__smakebuf_r+0x18>
 8000f1e:	f023 0303 	bic.w	r3, r3, #3
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	81a3      	strh	r3, [r4, #12]
 8000f28:	e7e2      	b.n	8000ef0 <__smakebuf_r+0xc>
 8000f2a:	89a3      	ldrh	r3, [r4, #12]
 8000f2c:	6020      	str	r0, [r4, #0]
 8000f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f32:	81a3      	strh	r3, [r4, #12]
 8000f34:	9b01      	ldr	r3, [sp, #4]
 8000f36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000f3a:	b15b      	cbz	r3, 8000f54 <__smakebuf_r+0x70>
 8000f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f40:	4630      	mov	r0, r6
 8000f42:	f000 f81d 	bl	8000f80 <_isatty_r>
 8000f46:	b128      	cbz	r0, 8000f54 <__smakebuf_r+0x70>
 8000f48:	89a3      	ldrh	r3, [r4, #12]
 8000f4a:	f023 0303 	bic.w	r3, r3, #3
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	81a3      	strh	r3, [r4, #12]
 8000f54:	89a3      	ldrh	r3, [r4, #12]
 8000f56:	431d      	orrs	r5, r3
 8000f58:	81a5      	strh	r5, [r4, #12]
 8000f5a:	e7cf      	b.n	8000efc <__smakebuf_r+0x18>

08000f5c <_fstat_r>:
 8000f5c:	b538      	push	{r3, r4, r5, lr}
 8000f5e:	4d07      	ldr	r5, [pc, #28]	@ (8000f7c <_fstat_r+0x20>)
 8000f60:	2300      	movs	r3, #0
 8000f62:	4604      	mov	r4, r0
 8000f64:	4608      	mov	r0, r1
 8000f66:	4611      	mov	r1, r2
 8000f68:	602b      	str	r3, [r5, #0]
 8000f6a:	f7ff fafb 	bl	8000564 <_fstat>
 8000f6e:	1c43      	adds	r3, r0, #1
 8000f70:	d102      	bne.n	8000f78 <_fstat_r+0x1c>
 8000f72:	682b      	ldr	r3, [r5, #0]
 8000f74:	b103      	cbz	r3, 8000f78 <_fstat_r+0x1c>
 8000f76:	6023      	str	r3, [r4, #0]
 8000f78:	bd38      	pop	{r3, r4, r5, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001b8 	.word	0x200001b8

08000f80 <_isatty_r>:
 8000f80:	b538      	push	{r3, r4, r5, lr}
 8000f82:	4d06      	ldr	r5, [pc, #24]	@ (8000f9c <_isatty_r+0x1c>)
 8000f84:	2300      	movs	r3, #0
 8000f86:	4604      	mov	r4, r0
 8000f88:	4608      	mov	r0, r1
 8000f8a:	602b      	str	r3, [r5, #0]
 8000f8c:	f7ff faf9 	bl	8000582 <_isatty>
 8000f90:	1c43      	adds	r3, r0, #1
 8000f92:	d102      	bne.n	8000f9a <_isatty_r+0x1a>
 8000f94:	682b      	ldr	r3, [r5, #0]
 8000f96:	b103      	cbz	r3, 8000f9a <_isatty_r+0x1a>
 8000f98:	6023      	str	r3, [r4, #0]
 8000f9a:	bd38      	pop	{r3, r4, r5, pc}
 8000f9c:	200001b8 	.word	0x200001b8

08000fa0 <_sbrk_r>:
 8000fa0:	b538      	push	{r3, r4, r5, lr}
 8000fa2:	4d06      	ldr	r5, [pc, #24]	@ (8000fbc <_sbrk_r+0x1c>)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	4608      	mov	r0, r1
 8000faa:	602b      	str	r3, [r5, #0]
 8000fac:	f7ff fb00 	bl	80005b0 <_sbrk>
 8000fb0:	1c43      	adds	r3, r0, #1
 8000fb2:	d102      	bne.n	8000fba <_sbrk_r+0x1a>
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	b103      	cbz	r3, 8000fba <_sbrk_r+0x1a>
 8000fb8:	6023      	str	r3, [r4, #0]
 8000fba:	bd38      	pop	{r3, r4, r5, pc}
 8000fbc:	200001b8 	.word	0x200001b8

08000fc0 <_init>:
 8000fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc2:	bf00      	nop
 8000fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fc6:	bc08      	pop	{r3}
 8000fc8:	469e      	mov	lr, r3
 8000fca:	4770      	bx	lr

08000fcc <_fini>:
 8000fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fce:	bf00      	nop
 8000fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fd2:	bc08      	pop	{r3}
 8000fd4:	469e      	mov	lr, r3
 8000fd6:	4770      	bx	lr
