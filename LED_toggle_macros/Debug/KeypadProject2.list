
KeypadProject2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001548  08001548  00002548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001584  08001584  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001584  08001584  00002584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800158c  0800158c  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800158c  0800158c  0000258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001590  08001590  00002590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001594  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009c7  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000036c  00000000  00000000  00003a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00003dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c5  00000000  00000000  00003ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b72  00000000  00000000  00003fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001571  00000000  00000000  00006b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000097cd  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011855  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b34  00000000  00000000  00011898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  000123cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001530 	.word	0x08001530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001530 	.word	0x08001530

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:

#include<stdio.h>
#include<stdint.h>
void delay();
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
	uint32_t volatile * const pClkctrlreg =(uint32_t*)0x40023830;
 8000276:	4b90      	ldr	r3, [pc, #576]	@ (80004b8 <main+0x248>)
 8000278:	617b      	str	r3, [r7, #20]
	uint32_t volatile * const pPortDmodereg =(uint32_t*)0x40020C00;
 800027a:	4b90      	ldr	r3, [pc, #576]	@ (80004bc <main+0x24c>)
 800027c:	613b      	str	r3, [r7, #16]
	uint32_t volatile * const pPortDoutreg =(uint32_t*)0x40020C14;
 800027e:	4b90      	ldr	r3, [pc, #576]	@ (80004c0 <main+0x250>)
 8000280:	60fb      	str	r3, [r7, #12]
	uint32_t volatile * const pPortInmodereg =(uint32_t*)(0x40020C00+0x10);
 8000282:	4b90      	ldr	r3, [pc, #576]	@ (80004c4 <main+0x254>)
 8000284:	60bb      	str	r3, [r7, #8]
	uint32_t volatile * const pPullupdownreg = (uint32_t*)(0x40020C00+0x0C);
 8000286:	4b90      	ldr	r3, [pc, #576]	@ (80004c8 <main+0x258>)
 8000288:	607b      	str	r3, [r7, #4]
	//clock enable
	*pClkctrlreg |=(0x08);
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f043 0208 	orr.w	r2, r3, #8
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	601a      	str	r2, [r3, #0]
	//setting input for rows 0-3
	*pPortDmodereg &=~(0xFF<<16);
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800029e:	693b      	ldr	r3, [r7, #16]
 80002a0:	601a      	str	r2, [r3, #0]
	//setting output for column
	*pPortDmodereg &=~(0xFF);
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	601a      	str	r2, [r3, #0]
	*pPortDmodereg |=(0x55);
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f043 0255 	orr.w	r2, r3, #85	@ 0x55
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	601a      	str	r2, [r3, #0]
	//setting pull up register
	*pPullupdownreg &=~(0xFF<<16);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	601a      	str	r2, [r3, #0]
	*pPullupdownreg |=(0x55<<16);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f443 02aa 	orr.w	r2, r3, #5570560	@ 0x550000
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	601a      	str	r2, [r3, #0]
	//setting a loop for checking the key pressed
	while(1){
		//setting all rows high
		*pPortDoutreg |=(0xF);
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f043 020f 	orr.w	r2, r3, #15
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	601a      	str	r2, [r3, #0]
		//setting row1 low
		*pPortDoutreg &=~(1<<0);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f023 0201 	bic.w	r2, r3, #1
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	601a      	str	r2, [r3, #0]
		//checking column
		if(!(*pPortInmodereg |=(0x0<<8))){
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	68ba      	ldr	r2, [r7, #8]
 80002f0:	6013      	str	r3, [r2, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d105      	bne.n	8000302 <main+0x92>
			//key 1 pressed
			delay();
 80002f6:	f000 f8ed 	bl	80004d4 <delay>
			printf("%d\n",1);
 80002fa:	2101      	movs	r1, #1
 80002fc:	4873      	ldr	r0, [pc, #460]	@ (80004cc <main+0x25c>)
 80002fe:	f000 faaf 	bl	8000860 <iprintf>
		}
		if(!(*pPortInmodereg |=(0x0<<9))){
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	68ba      	ldr	r2, [r7, #8]
 8000308:	6013      	str	r3, [r2, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d105      	bne.n	800031a <main+0xaa>
			//key 2 pressed
			delay();
 800030e:	f000 f8e1 	bl	80004d4 <delay>
			printf("%d\n",2);
 8000312:	2102      	movs	r1, #2
 8000314:	486d      	ldr	r0, [pc, #436]	@ (80004cc <main+0x25c>)
 8000316:	f000 faa3 	bl	8000860 <iprintf>
		}
		if(!(*pPortInmodereg |=(0x0<<8))){
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	6013      	str	r3, [r2, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d105      	bne.n	8000332 <main+0xc2>
			//key 3 pressed
			delay();
 8000326:	f000 f8d5 	bl	80004d4 <delay>
			printf("%d\n",3);
 800032a:	2103      	movs	r1, #3
 800032c:	4867      	ldr	r0, [pc, #412]	@ (80004cc <main+0x25c>)
 800032e:	f000 fa97 	bl	8000860 <iprintf>
		}
		if(!(*pPortInmodereg |=(0x0<<8))){
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	68ba      	ldr	r2, [r7, #8]
 8000338:	6013      	str	r3, [r2, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d105      	bne.n	800034a <main+0xda>
			//key A pressed
			delay();
 800033e:	f000 f8c9 	bl	80004d4 <delay>
			printf("%c\n",65);
 8000342:	2141      	movs	r1, #65	@ 0x41
 8000344:	4862      	ldr	r0, [pc, #392]	@ (80004d0 <main+0x260>)
 8000346:	f000 fa8b 	bl	8000860 <iprintf>
		}
		//setting all rows high
		*pPortDoutreg |=(0xF);
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f043 020f 	orr.w	r2, r3, #15
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	601a      	str	r2, [r3, #0]
		//setting row2 low
		*pPortDoutreg &=~(1<<1);
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f023 0202 	bic.w	r2, r3, #2
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
		//checking column
		if(!(*pPortInmodereg |=(0x0<<8))){
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	68ba      	ldr	r2, [r7, #8]
 8000368:	6013      	str	r3, [r2, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d105      	bne.n	800037a <main+0x10a>
			//key 4 pressed
			delay();
 800036e:	f000 f8b1 	bl	80004d4 <delay>
			printf("%d\n",4);
 8000372:	2104      	movs	r1, #4
 8000374:	4855      	ldr	r0, [pc, #340]	@ (80004cc <main+0x25c>)
 8000376:	f000 fa73 	bl	8000860 <iprintf>
		}
		if(!(*pPortInmodereg |=(0x0<<9))){
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	68ba      	ldr	r2, [r7, #8]
 8000380:	6013      	str	r3, [r2, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d105      	bne.n	8000392 <main+0x122>
			//key 5 pressed
			delay();
 8000386:	f000 f8a5 	bl	80004d4 <delay>
			printf("%d\n",5);
 800038a:	2105      	movs	r1, #5
 800038c:	484f      	ldr	r0, [pc, #316]	@ (80004cc <main+0x25c>)
 800038e:	f000 fa67 	bl	8000860 <iprintf>
		}
		if(!(*pPortInmodereg |=(0x0<<8))){
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	68ba      	ldr	r2, [r7, #8]
 8000398:	6013      	str	r3, [r2, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d105      	bne.n	80003aa <main+0x13a>
			//key 6 pressed
			delay();
 800039e:	f000 f899 	bl	80004d4 <delay>
			printf("%d\n",6);
 80003a2:	2106      	movs	r1, #6
 80003a4:	4849      	ldr	r0, [pc, #292]	@ (80004cc <main+0x25c>)
 80003a6:	f000 fa5b 	bl	8000860 <iprintf>
		}
		if(!(*pPortInmodereg |=(0x0<<8))){
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	68ba      	ldr	r2, [r7, #8]
 80003b0:	6013      	str	r3, [r2, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d105      	bne.n	80003c2 <main+0x152>
			//key B pressed
			delay();
 80003b6:	f000 f88d 	bl	80004d4 <delay>
			printf("%c\n",66);
 80003ba:	2142      	movs	r1, #66	@ 0x42
 80003bc:	4844      	ldr	r0, [pc, #272]	@ (80004d0 <main+0x260>)
 80003be:	f000 fa4f 	bl	8000860 <iprintf>
		}
		*pPortDoutreg |=(0xF);
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f043 020f 	orr.w	r2, r3, #15
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	601a      	str	r2, [r3, #0]
				//setting row3 low
				*pPortDoutreg &=~(1<<2);
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f023 0204 	bic.w	r2, r3, #4
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	601a      	str	r2, [r3, #0]
				//checking column
				if(!(*pPortInmodereg |=(0x0<<8))){
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	68ba      	ldr	r2, [r7, #8]
 80003e0:	6013      	str	r3, [r2, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d105      	bne.n	80003f2 <main+0x182>
					//key 7 pressed
					delay();
 80003e6:	f000 f875 	bl	80004d4 <delay>
					printf("%d\n",7);
 80003ea:	2107      	movs	r1, #7
 80003ec:	4837      	ldr	r0, [pc, #220]	@ (80004cc <main+0x25c>)
 80003ee:	f000 fa37 	bl	8000860 <iprintf>
				}
				if(!(*pPortInmodereg |=(0x0<<9))){
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	68ba      	ldr	r2, [r7, #8]
 80003f8:	6013      	str	r3, [r2, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d105      	bne.n	800040a <main+0x19a>
					//key 8 pressed
					delay();
 80003fe:	f000 f869 	bl	80004d4 <delay>
					printf("%d\n",8);
 8000402:	2108      	movs	r1, #8
 8000404:	4831      	ldr	r0, [pc, #196]	@ (80004cc <main+0x25c>)
 8000406:	f000 fa2b 	bl	8000860 <iprintf>
				}
				if(!(*pPortInmodereg |=(0x0<<8))){
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	68ba      	ldr	r2, [r7, #8]
 8000410:	6013      	str	r3, [r2, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d105      	bne.n	8000422 <main+0x1b2>
					//key 9 pressed
					delay();
 8000416:	f000 f85d 	bl	80004d4 <delay>
					printf("%d\n",9);
 800041a:	2109      	movs	r1, #9
 800041c:	482b      	ldr	r0, [pc, #172]	@ (80004cc <main+0x25c>)
 800041e:	f000 fa1f 	bl	8000860 <iprintf>
				}
				if(!(*pPortInmodereg |=(0x0<<8))){
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	68ba      	ldr	r2, [r7, #8]
 8000428:	6013      	str	r3, [r2, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d105      	bne.n	800043a <main+0x1ca>
					//key  C pressed
					delay();
 800042e:	f000 f851 	bl	80004d4 <delay>
					printf("%c\n",67);
 8000432:	2143      	movs	r1, #67	@ 0x43
 8000434:	4826      	ldr	r0, [pc, #152]	@ (80004d0 <main+0x260>)
 8000436:	f000 fa13 	bl	8000860 <iprintf>
				}
		*pPortDoutreg |=(0xF);
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f043 020f 	orr.w	r2, r3, #15
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	601a      	str	r2, [r3, #0]
				//setting row2 low
				*pPortDoutreg &=~(1<<3);
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f023 0208 	bic.w	r2, r3, #8
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	601a      	str	r2, [r3, #0]
				//checking column
				if(!(*pPortInmodereg |=(0x0<<8))){
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	68ba      	ldr	r2, [r7, #8]
 8000458:	6013      	str	r3, [r2, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d105      	bne.n	800046a <main+0x1fa>
					//key * pressed
					delay();
 800045e:	f000 f839 	bl	80004d4 <delay>
					printf("%c\n",42);
 8000462:	212a      	movs	r1, #42	@ 0x2a
 8000464:	481a      	ldr	r0, [pc, #104]	@ (80004d0 <main+0x260>)
 8000466:	f000 f9fb 	bl	8000860 <iprintf>
				}
				if(!(*pPortInmodereg |=(0x0<<9))){
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	68ba      	ldr	r2, [r7, #8]
 8000470:	6013      	str	r3, [r2, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d105      	bne.n	8000482 <main+0x212>
					//key 5 pressed
					delay();
 8000476:	f000 f82d 	bl	80004d4 <delay>
					printf("%d\n",0);
 800047a:	2100      	movs	r1, #0
 800047c:	4813      	ldr	r0, [pc, #76]	@ (80004cc <main+0x25c>)
 800047e:	f000 f9ef 	bl	8000860 <iprintf>
				}
				if(!(*pPortInmodereg |=(0x0<<8))){
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	68ba      	ldr	r2, [r7, #8]
 8000488:	6013      	str	r3, [r2, #0]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d105      	bne.n	800049a <main+0x22a>
					//key 6 pressed
					delay();
 800048e:	f000 f821 	bl	80004d4 <delay>
					printf("%c\n",35);
 8000492:	2123      	movs	r1, #35	@ 0x23
 8000494:	480e      	ldr	r0, [pc, #56]	@ (80004d0 <main+0x260>)
 8000496:	f000 f9e3 	bl	8000860 <iprintf>
				}
				if(!(*pPortInmodereg |=(0x0<<8))){
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	68ba      	ldr	r2, [r7, #8]
 80004a0:	6013      	str	r3, [r2, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	f47f af15 	bne.w	80002d2 <main+0x62>
					//key B pressed
					delay();
 80004a8:	f000 f814 	bl	80004d4 <delay>
					printf("%c\n",68);
 80004ac:	2144      	movs	r1, #68	@ 0x44
 80004ae:	4808      	ldr	r0, [pc, #32]	@ (80004d0 <main+0x260>)
 80004b0:	f000 f9d6 	bl	8000860 <iprintf>
		*pPortDoutreg |=(0xF);
 80004b4:	e70d      	b.n	80002d2 <main+0x62>
 80004b6:	bf00      	nop
 80004b8:	40023830 	.word	0x40023830
 80004bc:	40020c00 	.word	0x40020c00
 80004c0:	40020c14 	.word	0x40020c14
 80004c4:	40020c10 	.word	0x40020c10
 80004c8:	40020c0c 	.word	0x40020c0c
 80004cc:	08001548 	.word	0x08001548
 80004d0:	0800154c 	.word	0x0800154c

080004d4 <delay>:
				}


	}
}
void delay(void){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<30000;i++);
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	e002      	b.n	80004e6 <delay+0x12>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3301      	adds	r3, #1
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d9f7      	bls.n	80004e0 <delay+0xc>
}
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000506:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <ITM_SendChar+0x44>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <ITM_SendChar+0x44>)
 800050c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000510:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000512:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <ITM_SendChar+0x48>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a0b      	ldr	r2, [pc, #44]	@ (8000544 <ITM_SendChar+0x48>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800051e:	bf00      	nop
 8000520:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f8      	beq.n	8000520 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800052e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	6013      	str	r3, [r2, #0]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	e000edfc 	.word	0xe000edfc
 8000544:	e0000e00 	.word	0xe0000e00

08000548 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	e00a      	b.n	8000570 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800055a:	f3af 8000 	nop.w
 800055e:	4601      	mov	r1, r0
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	60ba      	str	r2, [r7, #8]
 8000566:	b2ca      	uxtb	r2, r1
 8000568:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	3301      	adds	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	429a      	cmp	r2, r3
 8000576:	dbf0      	blt.n	800055a <_read+0x12>
	}

return len;
 8000578:	687b      	ldr	r3, [r7, #4]
}
 800057a:	4618      	mov	r0, r3
 800057c:	3718      	adds	r7, #24
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b086      	sub	sp, #24
 8000586:	af00      	add	r7, sp, #0
 8000588:	60f8      	str	r0, [r7, #12]
 800058a:	60b9      	str	r1, [r7, #8]
 800058c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
 8000592:	e009      	b.n	80005a8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	60ba      	str	r2, [r7, #8]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ffad 	bl	80004fc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dbf1      	blt.n	8000594 <_write+0x12>
	}
	return len;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <_close>:

int _close(int file)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
	return -1;
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005e0:	605a      	str	r2, [r3, #4]
	return 0;
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <_isatty>:

int _isatty(int file)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
	return 1;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr

08000602 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000602:	b480      	push	{r7}
 8000604:	b085      	sub	sp, #20
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
	return 0;
 800060e:	2300      	movs	r3, #0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
	...

0800061c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000624:	4a14      	ldr	r2, [pc, #80]	@ (8000678 <_sbrk+0x5c>)
 8000626:	4b15      	ldr	r3, [pc, #84]	@ (800067c <_sbrk+0x60>)
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000630:	4b13      	ldr	r3, [pc, #76]	@ (8000680 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d102      	bne.n	800063e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <_sbrk+0x64>)
 800063a:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <_sbrk+0x68>)
 800063c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800063e:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	429a      	cmp	r2, r3
 800064a:	d207      	bcs.n	800065c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800064c:	f000 f9ac 	bl	80009a8 <__errno>
 8000650:	4603      	mov	r3, r0
 8000652:	220c      	movs	r2, #12
 8000654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	e009      	b.n	8000670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800065c:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <_sbrk+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000662:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <_sbrk+0x64>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	4a05      	ldr	r2, [pc, #20]	@ (8000680 <_sbrk+0x64>)
 800066c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800066e:	68fb      	ldr	r3, [r7, #12]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20020000 	.word	0x20020000
 800067c:	00000400 	.word	0x00000400
 8000680:	20000078 	.word	0x20000078
 8000684:	200001c8 	.word	0x200001c8

08000688 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000688:	480d      	ldr	r0, [pc, #52]	@ (80006c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800068a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800068c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000692:	490d      	ldr	r1, [pc, #52]	@ (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000694:	4a0d      	ldr	r2, [pc, #52]	@ (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	@ (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a8:	4c0a      	ldr	r4, [pc, #40]	@ (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006b6:	f000 f97d 	bl	80009b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ba:	f7ff fdd9 	bl	8000270 <main>

080006be <LoopForever>:

LoopForever:
  b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   r0, =_estack
 80006c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006cc:	08001594 	.word	0x08001594
  ldr r2, =_sbss
 80006d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006d4:	200001c8 	.word	0x200001c8

080006d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC_IRQHandler>
	...

080006dc <std>:
 80006dc:	2300      	movs	r3, #0
 80006de:	b510      	push	{r4, lr}
 80006e0:	4604      	mov	r4, r0
 80006e2:	e9c0 3300 	strd	r3, r3, [r0]
 80006e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006ea:	6083      	str	r3, [r0, #8]
 80006ec:	8181      	strh	r1, [r0, #12]
 80006ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80006f0:	81c2      	strh	r2, [r0, #14]
 80006f2:	6183      	str	r3, [r0, #24]
 80006f4:	4619      	mov	r1, r3
 80006f6:	2208      	movs	r2, #8
 80006f8:	305c      	adds	r0, #92	@ 0x5c
 80006fa:	f000 f906 	bl	800090a <memset>
 80006fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <std+0x58>)
 8000700:	6263      	str	r3, [r4, #36]	@ 0x24
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <std+0x5c>)
 8000704:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <std+0x60>)
 8000708:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <std+0x64>)
 800070c:	6323      	str	r3, [r4, #48]	@ 0x30
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <std+0x68>)
 8000710:	6224      	str	r4, [r4, #32]
 8000712:	429c      	cmp	r4, r3
 8000714:	d006      	beq.n	8000724 <std+0x48>
 8000716:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800071a:	4294      	cmp	r4, r2
 800071c:	d002      	beq.n	8000724 <std+0x48>
 800071e:	33d0      	adds	r3, #208	@ 0xd0
 8000720:	429c      	cmp	r4, r3
 8000722:	d105      	bne.n	8000730 <std+0x54>
 8000724:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800072c:	f000 b966 	b.w	80009fc <__retarget_lock_init_recursive>
 8000730:	bd10      	pop	{r4, pc}
 8000732:	bf00      	nop
 8000734:	08000885 	.word	0x08000885
 8000738:	080008a7 	.word	0x080008a7
 800073c:	080008df 	.word	0x080008df
 8000740:	08000903 	.word	0x08000903
 8000744:	2000007c 	.word	0x2000007c

08000748 <stdio_exit_handler>:
 8000748:	4a02      	ldr	r2, [pc, #8]	@ (8000754 <stdio_exit_handler+0xc>)
 800074a:	4903      	ldr	r1, [pc, #12]	@ (8000758 <stdio_exit_handler+0x10>)
 800074c:	4803      	ldr	r0, [pc, #12]	@ (800075c <stdio_exit_handler+0x14>)
 800074e:	f000 b869 	b.w	8000824 <_fwalk_sglue>
 8000752:	bf00      	nop
 8000754:	20000000 	.word	0x20000000
 8000758:	08001291 	.word	0x08001291
 800075c:	20000010 	.word	0x20000010

08000760 <cleanup_stdio>:
 8000760:	6841      	ldr	r1, [r0, #4]
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <cleanup_stdio+0x34>)
 8000764:	4299      	cmp	r1, r3
 8000766:	b510      	push	{r4, lr}
 8000768:	4604      	mov	r4, r0
 800076a:	d001      	beq.n	8000770 <cleanup_stdio+0x10>
 800076c:	f000 fd90 	bl	8001290 <_fflush_r>
 8000770:	68a1      	ldr	r1, [r4, #8]
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <cleanup_stdio+0x38>)
 8000774:	4299      	cmp	r1, r3
 8000776:	d002      	beq.n	800077e <cleanup_stdio+0x1e>
 8000778:	4620      	mov	r0, r4
 800077a:	f000 fd89 	bl	8001290 <_fflush_r>
 800077e:	68e1      	ldr	r1, [r4, #12]
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <cleanup_stdio+0x3c>)
 8000782:	4299      	cmp	r1, r3
 8000784:	d004      	beq.n	8000790 <cleanup_stdio+0x30>
 8000786:	4620      	mov	r0, r4
 8000788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800078c:	f000 bd80 	b.w	8001290 <_fflush_r>
 8000790:	bd10      	pop	{r4, pc}
 8000792:	bf00      	nop
 8000794:	2000007c 	.word	0x2000007c
 8000798:	200000e4 	.word	0x200000e4
 800079c:	2000014c 	.word	0x2000014c

080007a0 <global_stdio_init.part.0>:
 80007a0:	b510      	push	{r4, lr}
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <global_stdio_init.part.0+0x30>)
 80007a4:	4c0b      	ldr	r4, [pc, #44]	@ (80007d4 <global_stdio_init.part.0+0x34>)
 80007a6:	4a0c      	ldr	r2, [pc, #48]	@ (80007d8 <global_stdio_init.part.0+0x38>)
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	4620      	mov	r0, r4
 80007ac:	2200      	movs	r2, #0
 80007ae:	2104      	movs	r1, #4
 80007b0:	f7ff ff94 	bl	80006dc <std>
 80007b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007b8:	2201      	movs	r2, #1
 80007ba:	2109      	movs	r1, #9
 80007bc:	f7ff ff8e 	bl	80006dc <std>
 80007c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007c4:	2202      	movs	r2, #2
 80007c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ca:	2112      	movs	r1, #18
 80007cc:	f7ff bf86 	b.w	80006dc <std>
 80007d0:	200001b4 	.word	0x200001b4
 80007d4:	2000007c 	.word	0x2000007c
 80007d8:	08000749 	.word	0x08000749

080007dc <__sfp_lock_acquire>:
 80007dc:	4801      	ldr	r0, [pc, #4]	@ (80007e4 <__sfp_lock_acquire+0x8>)
 80007de:	f000 b90e 	b.w	80009fe <__retarget_lock_acquire_recursive>
 80007e2:	bf00      	nop
 80007e4:	200001bd 	.word	0x200001bd

080007e8 <__sfp_lock_release>:
 80007e8:	4801      	ldr	r0, [pc, #4]	@ (80007f0 <__sfp_lock_release+0x8>)
 80007ea:	f000 b909 	b.w	8000a00 <__retarget_lock_release_recursive>
 80007ee:	bf00      	nop
 80007f0:	200001bd 	.word	0x200001bd

080007f4 <__sinit>:
 80007f4:	b510      	push	{r4, lr}
 80007f6:	4604      	mov	r4, r0
 80007f8:	f7ff fff0 	bl	80007dc <__sfp_lock_acquire>
 80007fc:	6a23      	ldr	r3, [r4, #32]
 80007fe:	b11b      	cbz	r3, 8000808 <__sinit+0x14>
 8000800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000804:	f7ff bff0 	b.w	80007e8 <__sfp_lock_release>
 8000808:	4b04      	ldr	r3, [pc, #16]	@ (800081c <__sinit+0x28>)
 800080a:	6223      	str	r3, [r4, #32]
 800080c:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <__sinit+0x2c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1f5      	bne.n	8000800 <__sinit+0xc>
 8000814:	f7ff ffc4 	bl	80007a0 <global_stdio_init.part.0>
 8000818:	e7f2      	b.n	8000800 <__sinit+0xc>
 800081a:	bf00      	nop
 800081c:	08000761 	.word	0x08000761
 8000820:	200001b4 	.word	0x200001b4

08000824 <_fwalk_sglue>:
 8000824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000828:	4607      	mov	r7, r0
 800082a:	4688      	mov	r8, r1
 800082c:	4614      	mov	r4, r2
 800082e:	2600      	movs	r6, #0
 8000830:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000834:	f1b9 0901 	subs.w	r9, r9, #1
 8000838:	d505      	bpl.n	8000846 <_fwalk_sglue+0x22>
 800083a:	6824      	ldr	r4, [r4, #0]
 800083c:	2c00      	cmp	r4, #0
 800083e:	d1f7      	bne.n	8000830 <_fwalk_sglue+0xc>
 8000840:	4630      	mov	r0, r6
 8000842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000846:	89ab      	ldrh	r3, [r5, #12]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d907      	bls.n	800085c <_fwalk_sglue+0x38>
 800084c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000850:	3301      	adds	r3, #1
 8000852:	d003      	beq.n	800085c <_fwalk_sglue+0x38>
 8000854:	4629      	mov	r1, r5
 8000856:	4638      	mov	r0, r7
 8000858:	47c0      	blx	r8
 800085a:	4306      	orrs	r6, r0
 800085c:	3568      	adds	r5, #104	@ 0x68
 800085e:	e7e9      	b.n	8000834 <_fwalk_sglue+0x10>

08000860 <iprintf>:
 8000860:	b40f      	push	{r0, r1, r2, r3}
 8000862:	b507      	push	{r0, r1, r2, lr}
 8000864:	4906      	ldr	r1, [pc, #24]	@ (8000880 <iprintf+0x20>)
 8000866:	ab04      	add	r3, sp, #16
 8000868:	6808      	ldr	r0, [r1, #0]
 800086a:	f853 2b04 	ldr.w	r2, [r3], #4
 800086e:	6881      	ldr	r1, [r0, #8]
 8000870:	9301      	str	r3, [sp, #4]
 8000872:	f000 f9e7 	bl	8000c44 <_vfiprintf_r>
 8000876:	b003      	add	sp, #12
 8000878:	f85d eb04 	ldr.w	lr, [sp], #4
 800087c:	b004      	add	sp, #16
 800087e:	4770      	bx	lr
 8000880:	2000000c 	.word	0x2000000c

08000884 <__sread>:
 8000884:	b510      	push	{r4, lr}
 8000886:	460c      	mov	r4, r1
 8000888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800088c:	f000 f868 	bl	8000960 <_read_r>
 8000890:	2800      	cmp	r0, #0
 8000892:	bfab      	itete	ge
 8000894:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000896:	89a3      	ldrhlt	r3, [r4, #12]
 8000898:	181b      	addge	r3, r3, r0
 800089a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800089e:	bfac      	ite	ge
 80008a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008a2:	81a3      	strhlt	r3, [r4, #12]
 80008a4:	bd10      	pop	{r4, pc}

080008a6 <__swrite>:
 80008a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008aa:	461f      	mov	r7, r3
 80008ac:	898b      	ldrh	r3, [r1, #12]
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	4605      	mov	r5, r0
 80008b2:	460c      	mov	r4, r1
 80008b4:	4616      	mov	r6, r2
 80008b6:	d505      	bpl.n	80008c4 <__swrite+0x1e>
 80008b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008bc:	2302      	movs	r3, #2
 80008be:	2200      	movs	r2, #0
 80008c0:	f000 f83c 	bl	800093c <_lseek_r>
 80008c4:	89a3      	ldrh	r3, [r4, #12]
 80008c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008ce:	81a3      	strh	r3, [r4, #12]
 80008d0:	4632      	mov	r2, r6
 80008d2:	463b      	mov	r3, r7
 80008d4:	4628      	mov	r0, r5
 80008d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008da:	f000 b853 	b.w	8000984 <_write_r>

080008de <__sseek>:
 80008de:	b510      	push	{r4, lr}
 80008e0:	460c      	mov	r4, r1
 80008e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008e6:	f000 f829 	bl	800093c <_lseek_r>
 80008ea:	1c43      	adds	r3, r0, #1
 80008ec:	89a3      	ldrh	r3, [r4, #12]
 80008ee:	bf15      	itete	ne
 80008f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008fa:	81a3      	strheq	r3, [r4, #12]
 80008fc:	bf18      	it	ne
 80008fe:	81a3      	strhne	r3, [r4, #12]
 8000900:	bd10      	pop	{r4, pc}

08000902 <__sclose>:
 8000902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000906:	f000 b809 	b.w	800091c <_close_r>

0800090a <memset>:
 800090a:	4402      	add	r2, r0
 800090c:	4603      	mov	r3, r0
 800090e:	4293      	cmp	r3, r2
 8000910:	d100      	bne.n	8000914 <memset+0xa>
 8000912:	4770      	bx	lr
 8000914:	f803 1b01 	strb.w	r1, [r3], #1
 8000918:	e7f9      	b.n	800090e <memset+0x4>
	...

0800091c <_close_r>:
 800091c:	b538      	push	{r3, r4, r5, lr}
 800091e:	4d06      	ldr	r5, [pc, #24]	@ (8000938 <_close_r+0x1c>)
 8000920:	2300      	movs	r3, #0
 8000922:	4604      	mov	r4, r0
 8000924:	4608      	mov	r0, r1
 8000926:	602b      	str	r3, [r5, #0]
 8000928:	f7ff fe47 	bl	80005ba <_close>
 800092c:	1c43      	adds	r3, r0, #1
 800092e:	d102      	bne.n	8000936 <_close_r+0x1a>
 8000930:	682b      	ldr	r3, [r5, #0]
 8000932:	b103      	cbz	r3, 8000936 <_close_r+0x1a>
 8000934:	6023      	str	r3, [r4, #0]
 8000936:	bd38      	pop	{r3, r4, r5, pc}
 8000938:	200001b8 	.word	0x200001b8

0800093c <_lseek_r>:
 800093c:	b538      	push	{r3, r4, r5, lr}
 800093e:	4d07      	ldr	r5, [pc, #28]	@ (800095c <_lseek_r+0x20>)
 8000940:	4604      	mov	r4, r0
 8000942:	4608      	mov	r0, r1
 8000944:	4611      	mov	r1, r2
 8000946:	2200      	movs	r2, #0
 8000948:	602a      	str	r2, [r5, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	f7ff fe59 	bl	8000602 <_lseek>
 8000950:	1c43      	adds	r3, r0, #1
 8000952:	d102      	bne.n	800095a <_lseek_r+0x1e>
 8000954:	682b      	ldr	r3, [r5, #0]
 8000956:	b103      	cbz	r3, 800095a <_lseek_r+0x1e>
 8000958:	6023      	str	r3, [r4, #0]
 800095a:	bd38      	pop	{r3, r4, r5, pc}
 800095c:	200001b8 	.word	0x200001b8

08000960 <_read_r>:
 8000960:	b538      	push	{r3, r4, r5, lr}
 8000962:	4d07      	ldr	r5, [pc, #28]	@ (8000980 <_read_r+0x20>)
 8000964:	4604      	mov	r4, r0
 8000966:	4608      	mov	r0, r1
 8000968:	4611      	mov	r1, r2
 800096a:	2200      	movs	r2, #0
 800096c:	602a      	str	r2, [r5, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	f7ff fdea 	bl	8000548 <_read>
 8000974:	1c43      	adds	r3, r0, #1
 8000976:	d102      	bne.n	800097e <_read_r+0x1e>
 8000978:	682b      	ldr	r3, [r5, #0]
 800097a:	b103      	cbz	r3, 800097e <_read_r+0x1e>
 800097c:	6023      	str	r3, [r4, #0]
 800097e:	bd38      	pop	{r3, r4, r5, pc}
 8000980:	200001b8 	.word	0x200001b8

08000984 <_write_r>:
 8000984:	b538      	push	{r3, r4, r5, lr}
 8000986:	4d07      	ldr	r5, [pc, #28]	@ (80009a4 <_write_r+0x20>)
 8000988:	4604      	mov	r4, r0
 800098a:	4608      	mov	r0, r1
 800098c:	4611      	mov	r1, r2
 800098e:	2200      	movs	r2, #0
 8000990:	602a      	str	r2, [r5, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	f7ff fdf5 	bl	8000582 <_write>
 8000998:	1c43      	adds	r3, r0, #1
 800099a:	d102      	bne.n	80009a2 <_write_r+0x1e>
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	b103      	cbz	r3, 80009a2 <_write_r+0x1e>
 80009a0:	6023      	str	r3, [r4, #0]
 80009a2:	bd38      	pop	{r3, r4, r5, pc}
 80009a4:	200001b8 	.word	0x200001b8

080009a8 <__errno>:
 80009a8:	4b01      	ldr	r3, [pc, #4]	@ (80009b0 <__errno+0x8>)
 80009aa:	6818      	ldr	r0, [r3, #0]
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	2000000c 	.word	0x2000000c

080009b4 <__libc_init_array>:
 80009b4:	b570      	push	{r4, r5, r6, lr}
 80009b6:	4d0d      	ldr	r5, [pc, #52]	@ (80009ec <__libc_init_array+0x38>)
 80009b8:	4c0d      	ldr	r4, [pc, #52]	@ (80009f0 <__libc_init_array+0x3c>)
 80009ba:	1b64      	subs	r4, r4, r5
 80009bc:	10a4      	asrs	r4, r4, #2
 80009be:	2600      	movs	r6, #0
 80009c0:	42a6      	cmp	r6, r4
 80009c2:	d109      	bne.n	80009d8 <__libc_init_array+0x24>
 80009c4:	4d0b      	ldr	r5, [pc, #44]	@ (80009f4 <__libc_init_array+0x40>)
 80009c6:	4c0c      	ldr	r4, [pc, #48]	@ (80009f8 <__libc_init_array+0x44>)
 80009c8:	f000 fdb2 	bl	8001530 <_init>
 80009cc:	1b64      	subs	r4, r4, r5
 80009ce:	10a4      	asrs	r4, r4, #2
 80009d0:	2600      	movs	r6, #0
 80009d2:	42a6      	cmp	r6, r4
 80009d4:	d105      	bne.n	80009e2 <__libc_init_array+0x2e>
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009dc:	4798      	blx	r3
 80009de:	3601      	adds	r6, #1
 80009e0:	e7ee      	b.n	80009c0 <__libc_init_array+0xc>
 80009e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e6:	4798      	blx	r3
 80009e8:	3601      	adds	r6, #1
 80009ea:	e7f2      	b.n	80009d2 <__libc_init_array+0x1e>
 80009ec:	0800158c 	.word	0x0800158c
 80009f0:	0800158c 	.word	0x0800158c
 80009f4:	0800158c 	.word	0x0800158c
 80009f8:	08001590 	.word	0x08001590

080009fc <__retarget_lock_init_recursive>:
 80009fc:	4770      	bx	lr

080009fe <__retarget_lock_acquire_recursive>:
 80009fe:	4770      	bx	lr

08000a00 <__retarget_lock_release_recursive>:
 8000a00:	4770      	bx	lr
	...

08000a04 <_free_r>:
 8000a04:	b538      	push	{r3, r4, r5, lr}
 8000a06:	4605      	mov	r5, r0
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	d041      	beq.n	8000a90 <_free_r+0x8c>
 8000a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a10:	1f0c      	subs	r4, r1, #4
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	bfb8      	it	lt
 8000a16:	18e4      	addlt	r4, r4, r3
 8000a18:	f000 f8e0 	bl	8000bdc <__malloc_lock>
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a94 <_free_r+0x90>)
 8000a1e:	6813      	ldr	r3, [r2, #0]
 8000a20:	b933      	cbnz	r3, 8000a30 <_free_r+0x2c>
 8000a22:	6063      	str	r3, [r4, #4]
 8000a24:	6014      	str	r4, [r2, #0]
 8000a26:	4628      	mov	r0, r5
 8000a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a2c:	f000 b8dc 	b.w	8000be8 <__malloc_unlock>
 8000a30:	42a3      	cmp	r3, r4
 8000a32:	d908      	bls.n	8000a46 <_free_r+0x42>
 8000a34:	6820      	ldr	r0, [r4, #0]
 8000a36:	1821      	adds	r1, r4, r0
 8000a38:	428b      	cmp	r3, r1
 8000a3a:	bf01      	itttt	eq
 8000a3c:	6819      	ldreq	r1, [r3, #0]
 8000a3e:	685b      	ldreq	r3, [r3, #4]
 8000a40:	1809      	addeq	r1, r1, r0
 8000a42:	6021      	streq	r1, [r4, #0]
 8000a44:	e7ed      	b.n	8000a22 <_free_r+0x1e>
 8000a46:	461a      	mov	r2, r3
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	b10b      	cbz	r3, 8000a50 <_free_r+0x4c>
 8000a4c:	42a3      	cmp	r3, r4
 8000a4e:	d9fa      	bls.n	8000a46 <_free_r+0x42>
 8000a50:	6811      	ldr	r1, [r2, #0]
 8000a52:	1850      	adds	r0, r2, r1
 8000a54:	42a0      	cmp	r0, r4
 8000a56:	d10b      	bne.n	8000a70 <_free_r+0x6c>
 8000a58:	6820      	ldr	r0, [r4, #0]
 8000a5a:	4401      	add	r1, r0
 8000a5c:	1850      	adds	r0, r2, r1
 8000a5e:	4283      	cmp	r3, r0
 8000a60:	6011      	str	r1, [r2, #0]
 8000a62:	d1e0      	bne.n	8000a26 <_free_r+0x22>
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	6053      	str	r3, [r2, #4]
 8000a6a:	4408      	add	r0, r1
 8000a6c:	6010      	str	r0, [r2, #0]
 8000a6e:	e7da      	b.n	8000a26 <_free_r+0x22>
 8000a70:	d902      	bls.n	8000a78 <_free_r+0x74>
 8000a72:	230c      	movs	r3, #12
 8000a74:	602b      	str	r3, [r5, #0]
 8000a76:	e7d6      	b.n	8000a26 <_free_r+0x22>
 8000a78:	6820      	ldr	r0, [r4, #0]
 8000a7a:	1821      	adds	r1, r4, r0
 8000a7c:	428b      	cmp	r3, r1
 8000a7e:	bf04      	itt	eq
 8000a80:	6819      	ldreq	r1, [r3, #0]
 8000a82:	685b      	ldreq	r3, [r3, #4]
 8000a84:	6063      	str	r3, [r4, #4]
 8000a86:	bf04      	itt	eq
 8000a88:	1809      	addeq	r1, r1, r0
 8000a8a:	6021      	streq	r1, [r4, #0]
 8000a8c:	6054      	str	r4, [r2, #4]
 8000a8e:	e7ca      	b.n	8000a26 <_free_r+0x22>
 8000a90:	bd38      	pop	{r3, r4, r5, pc}
 8000a92:	bf00      	nop
 8000a94:	200001c4 	.word	0x200001c4

08000a98 <sbrk_aligned>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	4e0f      	ldr	r6, [pc, #60]	@ (8000ad8 <sbrk_aligned+0x40>)
 8000a9c:	460c      	mov	r4, r1
 8000a9e:	6831      	ldr	r1, [r6, #0]
 8000aa0:	4605      	mov	r5, r0
 8000aa2:	b911      	cbnz	r1, 8000aaa <sbrk_aligned+0x12>
 8000aa4:	f000 fcb0 	bl	8001408 <_sbrk_r>
 8000aa8:	6030      	str	r0, [r6, #0]
 8000aaa:	4621      	mov	r1, r4
 8000aac:	4628      	mov	r0, r5
 8000aae:	f000 fcab 	bl	8001408 <_sbrk_r>
 8000ab2:	1c43      	adds	r3, r0, #1
 8000ab4:	d103      	bne.n	8000abe <sbrk_aligned+0x26>
 8000ab6:	f04f 34ff 	mov.w	r4, #4294967295
 8000aba:	4620      	mov	r0, r4
 8000abc:	bd70      	pop	{r4, r5, r6, pc}
 8000abe:	1cc4      	adds	r4, r0, #3
 8000ac0:	f024 0403 	bic.w	r4, r4, #3
 8000ac4:	42a0      	cmp	r0, r4
 8000ac6:	d0f8      	beq.n	8000aba <sbrk_aligned+0x22>
 8000ac8:	1a21      	subs	r1, r4, r0
 8000aca:	4628      	mov	r0, r5
 8000acc:	f000 fc9c 	bl	8001408 <_sbrk_r>
 8000ad0:	3001      	adds	r0, #1
 8000ad2:	d1f2      	bne.n	8000aba <sbrk_aligned+0x22>
 8000ad4:	e7ef      	b.n	8000ab6 <sbrk_aligned+0x1e>
 8000ad6:	bf00      	nop
 8000ad8:	200001c0 	.word	0x200001c0

08000adc <_malloc_r>:
 8000adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ae0:	1ccd      	adds	r5, r1, #3
 8000ae2:	f025 0503 	bic.w	r5, r5, #3
 8000ae6:	3508      	adds	r5, #8
 8000ae8:	2d0c      	cmp	r5, #12
 8000aea:	bf38      	it	cc
 8000aec:	250c      	movcc	r5, #12
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	4606      	mov	r6, r0
 8000af2:	db01      	blt.n	8000af8 <_malloc_r+0x1c>
 8000af4:	42a9      	cmp	r1, r5
 8000af6:	d904      	bls.n	8000b02 <_malloc_r+0x26>
 8000af8:	230c      	movs	r3, #12
 8000afa:	6033      	str	r3, [r6, #0]
 8000afc:	2000      	movs	r0, #0
 8000afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bd8 <_malloc_r+0xfc>
 8000b06:	f000 f869 	bl	8000bdc <__malloc_lock>
 8000b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b0e:	461c      	mov	r4, r3
 8000b10:	bb44      	cbnz	r4, 8000b64 <_malloc_r+0x88>
 8000b12:	4629      	mov	r1, r5
 8000b14:	4630      	mov	r0, r6
 8000b16:	f7ff ffbf 	bl	8000a98 <sbrk_aligned>
 8000b1a:	1c43      	adds	r3, r0, #1
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	d158      	bne.n	8000bd2 <_malloc_r+0xf6>
 8000b20:	f8d8 4000 	ldr.w	r4, [r8]
 8000b24:	4627      	mov	r7, r4
 8000b26:	2f00      	cmp	r7, #0
 8000b28:	d143      	bne.n	8000bb2 <_malloc_r+0xd6>
 8000b2a:	2c00      	cmp	r4, #0
 8000b2c:	d04b      	beq.n	8000bc6 <_malloc_r+0xea>
 8000b2e:	6823      	ldr	r3, [r4, #0]
 8000b30:	4639      	mov	r1, r7
 8000b32:	4630      	mov	r0, r6
 8000b34:	eb04 0903 	add.w	r9, r4, r3
 8000b38:	f000 fc66 	bl	8001408 <_sbrk_r>
 8000b3c:	4581      	cmp	r9, r0
 8000b3e:	d142      	bne.n	8000bc6 <_malloc_r+0xea>
 8000b40:	6821      	ldr	r1, [r4, #0]
 8000b42:	1a6d      	subs	r5, r5, r1
 8000b44:	4629      	mov	r1, r5
 8000b46:	4630      	mov	r0, r6
 8000b48:	f7ff ffa6 	bl	8000a98 <sbrk_aligned>
 8000b4c:	3001      	adds	r0, #1
 8000b4e:	d03a      	beq.n	8000bc6 <_malloc_r+0xea>
 8000b50:	6823      	ldr	r3, [r4, #0]
 8000b52:	442b      	add	r3, r5
 8000b54:	6023      	str	r3, [r4, #0]
 8000b56:	f8d8 3000 	ldr.w	r3, [r8]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	bb62      	cbnz	r2, 8000bb8 <_malloc_r+0xdc>
 8000b5e:	f8c8 7000 	str.w	r7, [r8]
 8000b62:	e00f      	b.n	8000b84 <_malloc_r+0xa8>
 8000b64:	6822      	ldr	r2, [r4, #0]
 8000b66:	1b52      	subs	r2, r2, r5
 8000b68:	d420      	bmi.n	8000bac <_malloc_r+0xd0>
 8000b6a:	2a0b      	cmp	r2, #11
 8000b6c:	d917      	bls.n	8000b9e <_malloc_r+0xc2>
 8000b6e:	1961      	adds	r1, r4, r5
 8000b70:	42a3      	cmp	r3, r4
 8000b72:	6025      	str	r5, [r4, #0]
 8000b74:	bf18      	it	ne
 8000b76:	6059      	strne	r1, [r3, #4]
 8000b78:	6863      	ldr	r3, [r4, #4]
 8000b7a:	bf08      	it	eq
 8000b7c:	f8c8 1000 	streq.w	r1, [r8]
 8000b80:	5162      	str	r2, [r4, r5]
 8000b82:	604b      	str	r3, [r1, #4]
 8000b84:	4630      	mov	r0, r6
 8000b86:	f000 f82f 	bl	8000be8 <__malloc_unlock>
 8000b8a:	f104 000b 	add.w	r0, r4, #11
 8000b8e:	1d23      	adds	r3, r4, #4
 8000b90:	f020 0007 	bic.w	r0, r0, #7
 8000b94:	1ac2      	subs	r2, r0, r3
 8000b96:	bf1c      	itt	ne
 8000b98:	1a1b      	subne	r3, r3, r0
 8000b9a:	50a3      	strne	r3, [r4, r2]
 8000b9c:	e7af      	b.n	8000afe <_malloc_r+0x22>
 8000b9e:	6862      	ldr	r2, [r4, #4]
 8000ba0:	42a3      	cmp	r3, r4
 8000ba2:	bf0c      	ite	eq
 8000ba4:	f8c8 2000 	streq.w	r2, [r8]
 8000ba8:	605a      	strne	r2, [r3, #4]
 8000baa:	e7eb      	b.n	8000b84 <_malloc_r+0xa8>
 8000bac:	4623      	mov	r3, r4
 8000bae:	6864      	ldr	r4, [r4, #4]
 8000bb0:	e7ae      	b.n	8000b10 <_malloc_r+0x34>
 8000bb2:	463c      	mov	r4, r7
 8000bb4:	687f      	ldr	r7, [r7, #4]
 8000bb6:	e7b6      	b.n	8000b26 <_malloc_r+0x4a>
 8000bb8:	461a      	mov	r2, r3
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	42a3      	cmp	r3, r4
 8000bbe:	d1fb      	bne.n	8000bb8 <_malloc_r+0xdc>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	6053      	str	r3, [r2, #4]
 8000bc4:	e7de      	b.n	8000b84 <_malloc_r+0xa8>
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	6033      	str	r3, [r6, #0]
 8000bca:	4630      	mov	r0, r6
 8000bcc:	f000 f80c 	bl	8000be8 <__malloc_unlock>
 8000bd0:	e794      	b.n	8000afc <_malloc_r+0x20>
 8000bd2:	6005      	str	r5, [r0, #0]
 8000bd4:	e7d6      	b.n	8000b84 <_malloc_r+0xa8>
 8000bd6:	bf00      	nop
 8000bd8:	200001c4 	.word	0x200001c4

08000bdc <__malloc_lock>:
 8000bdc:	4801      	ldr	r0, [pc, #4]	@ (8000be4 <__malloc_lock+0x8>)
 8000bde:	f7ff bf0e 	b.w	80009fe <__retarget_lock_acquire_recursive>
 8000be2:	bf00      	nop
 8000be4:	200001bc 	.word	0x200001bc

08000be8 <__malloc_unlock>:
 8000be8:	4801      	ldr	r0, [pc, #4]	@ (8000bf0 <__malloc_unlock+0x8>)
 8000bea:	f7ff bf09 	b.w	8000a00 <__retarget_lock_release_recursive>
 8000bee:	bf00      	nop
 8000bf0:	200001bc 	.word	0x200001bc

08000bf4 <__sfputc_r>:
 8000bf4:	6893      	ldr	r3, [r2, #8]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	b410      	push	{r4}
 8000bfc:	6093      	str	r3, [r2, #8]
 8000bfe:	da07      	bge.n	8000c10 <__sfputc_r+0x1c>
 8000c00:	6994      	ldr	r4, [r2, #24]
 8000c02:	42a3      	cmp	r3, r4
 8000c04:	db01      	blt.n	8000c0a <__sfputc_r+0x16>
 8000c06:	290a      	cmp	r1, #10
 8000c08:	d102      	bne.n	8000c10 <__sfputc_r+0x1c>
 8000c0a:	bc10      	pop	{r4}
 8000c0c:	f000 bb68 	b.w	80012e0 <__swbuf_r>
 8000c10:	6813      	ldr	r3, [r2, #0]
 8000c12:	1c58      	adds	r0, r3, #1
 8000c14:	6010      	str	r0, [r2, #0]
 8000c16:	7019      	strb	r1, [r3, #0]
 8000c18:	4608      	mov	r0, r1
 8000c1a:	bc10      	pop	{r4}
 8000c1c:	4770      	bx	lr

08000c1e <__sfputs_r>:
 8000c1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c20:	4606      	mov	r6, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	4614      	mov	r4, r2
 8000c26:	18d5      	adds	r5, r2, r3
 8000c28:	42ac      	cmp	r4, r5
 8000c2a:	d101      	bne.n	8000c30 <__sfputs_r+0x12>
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e007      	b.n	8000c40 <__sfputs_r+0x22>
 8000c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c34:	463a      	mov	r2, r7
 8000c36:	4630      	mov	r0, r6
 8000c38:	f7ff ffdc 	bl	8000bf4 <__sfputc_r>
 8000c3c:	1c43      	adds	r3, r0, #1
 8000c3e:	d1f3      	bne.n	8000c28 <__sfputs_r+0xa>
 8000c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c44 <_vfiprintf_r>:
 8000c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c48:	460d      	mov	r5, r1
 8000c4a:	b09d      	sub	sp, #116	@ 0x74
 8000c4c:	4614      	mov	r4, r2
 8000c4e:	4698      	mov	r8, r3
 8000c50:	4606      	mov	r6, r0
 8000c52:	b118      	cbz	r0, 8000c5c <_vfiprintf_r+0x18>
 8000c54:	6a03      	ldr	r3, [r0, #32]
 8000c56:	b90b      	cbnz	r3, 8000c5c <_vfiprintf_r+0x18>
 8000c58:	f7ff fdcc 	bl	80007f4 <__sinit>
 8000c5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c5e:	07d9      	lsls	r1, r3, #31
 8000c60:	d405      	bmi.n	8000c6e <_vfiprintf_r+0x2a>
 8000c62:	89ab      	ldrh	r3, [r5, #12]
 8000c64:	059a      	lsls	r2, r3, #22
 8000c66:	d402      	bmi.n	8000c6e <_vfiprintf_r+0x2a>
 8000c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c6a:	f7ff fec8 	bl	80009fe <__retarget_lock_acquire_recursive>
 8000c6e:	89ab      	ldrh	r3, [r5, #12]
 8000c70:	071b      	lsls	r3, r3, #28
 8000c72:	d501      	bpl.n	8000c78 <_vfiprintf_r+0x34>
 8000c74:	692b      	ldr	r3, [r5, #16]
 8000c76:	b99b      	cbnz	r3, 8000ca0 <_vfiprintf_r+0x5c>
 8000c78:	4629      	mov	r1, r5
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	f000 fb6e 	bl	800135c <__swsetup_r>
 8000c80:	b170      	cbz	r0, 8000ca0 <_vfiprintf_r+0x5c>
 8000c82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c84:	07dc      	lsls	r4, r3, #31
 8000c86:	d504      	bpl.n	8000c92 <_vfiprintf_r+0x4e>
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	b01d      	add	sp, #116	@ 0x74
 8000c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c92:	89ab      	ldrh	r3, [r5, #12]
 8000c94:	0598      	lsls	r0, r3, #22
 8000c96:	d4f7      	bmi.n	8000c88 <_vfiprintf_r+0x44>
 8000c98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c9a:	f7ff feb1 	bl	8000a00 <__retarget_lock_release_recursive>
 8000c9e:	e7f3      	b.n	8000c88 <_vfiprintf_r+0x44>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ca4:	2320      	movs	r3, #32
 8000ca6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000caa:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cae:	2330      	movs	r3, #48	@ 0x30
 8000cb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000e60 <_vfiprintf_r+0x21c>
 8000cb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000cb8:	f04f 0901 	mov.w	r9, #1
 8000cbc:	4623      	mov	r3, r4
 8000cbe:	469a      	mov	sl, r3
 8000cc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cc4:	b10a      	cbz	r2, 8000cca <_vfiprintf_r+0x86>
 8000cc6:	2a25      	cmp	r2, #37	@ 0x25
 8000cc8:	d1f9      	bne.n	8000cbe <_vfiprintf_r+0x7a>
 8000cca:	ebba 0b04 	subs.w	fp, sl, r4
 8000cce:	d00b      	beq.n	8000ce8 <_vfiprintf_r+0xa4>
 8000cd0:	465b      	mov	r3, fp
 8000cd2:	4622      	mov	r2, r4
 8000cd4:	4629      	mov	r1, r5
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	f7ff ffa1 	bl	8000c1e <__sfputs_r>
 8000cdc:	3001      	adds	r0, #1
 8000cde:	f000 80a7 	beq.w	8000e30 <_vfiprintf_r+0x1ec>
 8000ce2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ce4:	445a      	add	r2, fp
 8000ce6:	9209      	str	r2, [sp, #36]	@ 0x24
 8000ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 809f 	beq.w	8000e30 <_vfiprintf_r+0x1ec>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cfc:	f10a 0a01 	add.w	sl, sl, #1
 8000d00:	9304      	str	r3, [sp, #16]
 8000d02:	9307      	str	r3, [sp, #28]
 8000d04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d08:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d0a:	4654      	mov	r4, sl
 8000d0c:	2205      	movs	r2, #5
 8000d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d12:	4853      	ldr	r0, [pc, #332]	@ (8000e60 <_vfiprintf_r+0x21c>)
 8000d14:	f7ff fa5c 	bl	80001d0 <memchr>
 8000d18:	9a04      	ldr	r2, [sp, #16]
 8000d1a:	b9d8      	cbnz	r0, 8000d54 <_vfiprintf_r+0x110>
 8000d1c:	06d1      	lsls	r1, r2, #27
 8000d1e:	bf44      	itt	mi
 8000d20:	2320      	movmi	r3, #32
 8000d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d26:	0713      	lsls	r3, r2, #28
 8000d28:	bf44      	itt	mi
 8000d2a:	232b      	movmi	r3, #43	@ 0x2b
 8000d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d30:	f89a 3000 	ldrb.w	r3, [sl]
 8000d34:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d36:	d015      	beq.n	8000d64 <_vfiprintf_r+0x120>
 8000d38:	9a07      	ldr	r2, [sp, #28]
 8000d3a:	4654      	mov	r4, sl
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f04f 0c0a 	mov.w	ip, #10
 8000d42:	4621      	mov	r1, r4
 8000d44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d48:	3b30      	subs	r3, #48	@ 0x30
 8000d4a:	2b09      	cmp	r3, #9
 8000d4c:	d94b      	bls.n	8000de6 <_vfiprintf_r+0x1a2>
 8000d4e:	b1b0      	cbz	r0, 8000d7e <_vfiprintf_r+0x13a>
 8000d50:	9207      	str	r2, [sp, #28]
 8000d52:	e014      	b.n	8000d7e <_vfiprintf_r+0x13a>
 8000d54:	eba0 0308 	sub.w	r3, r0, r8
 8000d58:	fa09 f303 	lsl.w	r3, r9, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	9304      	str	r3, [sp, #16]
 8000d60:	46a2      	mov	sl, r4
 8000d62:	e7d2      	b.n	8000d0a <_vfiprintf_r+0xc6>
 8000d64:	9b03      	ldr	r3, [sp, #12]
 8000d66:	1d19      	adds	r1, r3, #4
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	9103      	str	r1, [sp, #12]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	bfbb      	ittet	lt
 8000d70:	425b      	neglt	r3, r3
 8000d72:	f042 0202 	orrlt.w	r2, r2, #2
 8000d76:	9307      	strge	r3, [sp, #28]
 8000d78:	9307      	strlt	r3, [sp, #28]
 8000d7a:	bfb8      	it	lt
 8000d7c:	9204      	strlt	r2, [sp, #16]
 8000d7e:	7823      	ldrb	r3, [r4, #0]
 8000d80:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d82:	d10a      	bne.n	8000d9a <_vfiprintf_r+0x156>
 8000d84:	7863      	ldrb	r3, [r4, #1]
 8000d86:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d88:	d132      	bne.n	8000df0 <_vfiprintf_r+0x1ac>
 8000d8a:	9b03      	ldr	r3, [sp, #12]
 8000d8c:	1d1a      	adds	r2, r3, #4
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	9203      	str	r2, [sp, #12]
 8000d92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d96:	3402      	adds	r4, #2
 8000d98:	9305      	str	r3, [sp, #20]
 8000d9a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000e64 <_vfiprintf_r+0x220>
 8000d9e:	7821      	ldrb	r1, [r4, #0]
 8000da0:	2203      	movs	r2, #3
 8000da2:	4650      	mov	r0, sl
 8000da4:	f7ff fa14 	bl	80001d0 <memchr>
 8000da8:	b138      	cbz	r0, 8000dba <_vfiprintf_r+0x176>
 8000daa:	9b04      	ldr	r3, [sp, #16]
 8000dac:	eba0 000a 	sub.w	r0, r0, sl
 8000db0:	2240      	movs	r2, #64	@ 0x40
 8000db2:	4082      	lsls	r2, r0
 8000db4:	4313      	orrs	r3, r2
 8000db6:	3401      	adds	r4, #1
 8000db8:	9304      	str	r3, [sp, #16]
 8000dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dbe:	482a      	ldr	r0, [pc, #168]	@ (8000e68 <_vfiprintf_r+0x224>)
 8000dc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000dc4:	2206      	movs	r2, #6
 8000dc6:	f7ff fa03 	bl	80001d0 <memchr>
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	d03f      	beq.n	8000e4e <_vfiprintf_r+0x20a>
 8000dce:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <_vfiprintf_r+0x228>)
 8000dd0:	bb1b      	cbnz	r3, 8000e1a <_vfiprintf_r+0x1d6>
 8000dd2:	9b03      	ldr	r3, [sp, #12]
 8000dd4:	3307      	adds	r3, #7
 8000dd6:	f023 0307 	bic.w	r3, r3, #7
 8000dda:	3308      	adds	r3, #8
 8000ddc:	9303      	str	r3, [sp, #12]
 8000dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000de0:	443b      	add	r3, r7
 8000de2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000de4:	e76a      	b.n	8000cbc <_vfiprintf_r+0x78>
 8000de6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dea:	460c      	mov	r4, r1
 8000dec:	2001      	movs	r0, #1
 8000dee:	e7a8      	b.n	8000d42 <_vfiprintf_r+0xfe>
 8000df0:	2300      	movs	r3, #0
 8000df2:	3401      	adds	r4, #1
 8000df4:	9305      	str	r3, [sp, #20]
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 0c0a 	mov.w	ip, #10
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e02:	3a30      	subs	r2, #48	@ 0x30
 8000e04:	2a09      	cmp	r2, #9
 8000e06:	d903      	bls.n	8000e10 <_vfiprintf_r+0x1cc>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0c6      	beq.n	8000d9a <_vfiprintf_r+0x156>
 8000e0c:	9105      	str	r1, [sp, #20]
 8000e0e:	e7c4      	b.n	8000d9a <_vfiprintf_r+0x156>
 8000e10:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e14:	4604      	mov	r4, r0
 8000e16:	2301      	movs	r3, #1
 8000e18:	e7f0      	b.n	8000dfc <_vfiprintf_r+0x1b8>
 8000e1a:	ab03      	add	r3, sp, #12
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	462a      	mov	r2, r5
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <_vfiprintf_r+0x22c>)
 8000e22:	a904      	add	r1, sp, #16
 8000e24:	4630      	mov	r0, r6
 8000e26:	f3af 8000 	nop.w
 8000e2a:	4607      	mov	r7, r0
 8000e2c:	1c78      	adds	r0, r7, #1
 8000e2e:	d1d6      	bne.n	8000dde <_vfiprintf_r+0x19a>
 8000e30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e32:	07d9      	lsls	r1, r3, #31
 8000e34:	d405      	bmi.n	8000e42 <_vfiprintf_r+0x1fe>
 8000e36:	89ab      	ldrh	r3, [r5, #12]
 8000e38:	059a      	lsls	r2, r3, #22
 8000e3a:	d402      	bmi.n	8000e42 <_vfiprintf_r+0x1fe>
 8000e3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e3e:	f7ff fddf 	bl	8000a00 <__retarget_lock_release_recursive>
 8000e42:	89ab      	ldrh	r3, [r5, #12]
 8000e44:	065b      	lsls	r3, r3, #25
 8000e46:	f53f af1f 	bmi.w	8000c88 <_vfiprintf_r+0x44>
 8000e4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e4c:	e71e      	b.n	8000c8c <_vfiprintf_r+0x48>
 8000e4e:	ab03      	add	r3, sp, #12
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	462a      	mov	r2, r5
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <_vfiprintf_r+0x22c>)
 8000e56:	a904      	add	r1, sp, #16
 8000e58:	4630      	mov	r0, r6
 8000e5a:	f000 f879 	bl	8000f50 <_printf_i>
 8000e5e:	e7e4      	b.n	8000e2a <_vfiprintf_r+0x1e6>
 8000e60:	08001550 	.word	0x08001550
 8000e64:	08001556 	.word	0x08001556
 8000e68:	0800155a 	.word	0x0800155a
 8000e6c:	00000000 	.word	0x00000000
 8000e70:	08000c1f 	.word	0x08000c1f

08000e74 <_printf_common>:
 8000e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e78:	4616      	mov	r6, r2
 8000e7a:	4698      	mov	r8, r3
 8000e7c:	688a      	ldr	r2, [r1, #8]
 8000e7e:	690b      	ldr	r3, [r1, #16]
 8000e80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e84:	4293      	cmp	r3, r2
 8000e86:	bfb8      	it	lt
 8000e88:	4613      	movlt	r3, r2
 8000e8a:	6033      	str	r3, [r6, #0]
 8000e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e90:	4607      	mov	r7, r0
 8000e92:	460c      	mov	r4, r1
 8000e94:	b10a      	cbz	r2, 8000e9a <_printf_common+0x26>
 8000e96:	3301      	adds	r3, #1
 8000e98:	6033      	str	r3, [r6, #0]
 8000e9a:	6823      	ldr	r3, [r4, #0]
 8000e9c:	0699      	lsls	r1, r3, #26
 8000e9e:	bf42      	ittt	mi
 8000ea0:	6833      	ldrmi	r3, [r6, #0]
 8000ea2:	3302      	addmi	r3, #2
 8000ea4:	6033      	strmi	r3, [r6, #0]
 8000ea6:	6825      	ldr	r5, [r4, #0]
 8000ea8:	f015 0506 	ands.w	r5, r5, #6
 8000eac:	d106      	bne.n	8000ebc <_printf_common+0x48>
 8000eae:	f104 0a19 	add.w	sl, r4, #25
 8000eb2:	68e3      	ldr	r3, [r4, #12]
 8000eb4:	6832      	ldr	r2, [r6, #0]
 8000eb6:	1a9b      	subs	r3, r3, r2
 8000eb8:	42ab      	cmp	r3, r5
 8000eba:	dc26      	bgt.n	8000f0a <_printf_common+0x96>
 8000ebc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ec0:	6822      	ldr	r2, [r4, #0]
 8000ec2:	3b00      	subs	r3, #0
 8000ec4:	bf18      	it	ne
 8000ec6:	2301      	movne	r3, #1
 8000ec8:	0692      	lsls	r2, r2, #26
 8000eca:	d42b      	bmi.n	8000f24 <_printf_common+0xb0>
 8000ecc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ed0:	4641      	mov	r1, r8
 8000ed2:	4638      	mov	r0, r7
 8000ed4:	47c8      	blx	r9
 8000ed6:	3001      	adds	r0, #1
 8000ed8:	d01e      	beq.n	8000f18 <_printf_common+0xa4>
 8000eda:	6823      	ldr	r3, [r4, #0]
 8000edc:	6922      	ldr	r2, [r4, #16]
 8000ede:	f003 0306 	and.w	r3, r3, #6
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf02      	ittt	eq
 8000ee6:	68e5      	ldreq	r5, [r4, #12]
 8000ee8:	6833      	ldreq	r3, [r6, #0]
 8000eea:	1aed      	subeq	r5, r5, r3
 8000eec:	68a3      	ldr	r3, [r4, #8]
 8000eee:	bf0c      	ite	eq
 8000ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ef4:	2500      	movne	r5, #0
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	bfc4      	itt	gt
 8000efa:	1a9b      	subgt	r3, r3, r2
 8000efc:	18ed      	addgt	r5, r5, r3
 8000efe:	2600      	movs	r6, #0
 8000f00:	341a      	adds	r4, #26
 8000f02:	42b5      	cmp	r5, r6
 8000f04:	d11a      	bne.n	8000f3c <_printf_common+0xc8>
 8000f06:	2000      	movs	r0, #0
 8000f08:	e008      	b.n	8000f1c <_printf_common+0xa8>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	4652      	mov	r2, sl
 8000f0e:	4641      	mov	r1, r8
 8000f10:	4638      	mov	r0, r7
 8000f12:	47c8      	blx	r9
 8000f14:	3001      	adds	r0, #1
 8000f16:	d103      	bne.n	8000f20 <_printf_common+0xac>
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f20:	3501      	adds	r5, #1
 8000f22:	e7c6      	b.n	8000eb2 <_printf_common+0x3e>
 8000f24:	18e1      	adds	r1, r4, r3
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	2030      	movs	r0, #48	@ 0x30
 8000f2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f2e:	4422      	add	r2, r4
 8000f30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f38:	3302      	adds	r3, #2
 8000f3a:	e7c7      	b.n	8000ecc <_printf_common+0x58>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	4622      	mov	r2, r4
 8000f40:	4641      	mov	r1, r8
 8000f42:	4638      	mov	r0, r7
 8000f44:	47c8      	blx	r9
 8000f46:	3001      	adds	r0, #1
 8000f48:	d0e6      	beq.n	8000f18 <_printf_common+0xa4>
 8000f4a:	3601      	adds	r6, #1
 8000f4c:	e7d9      	b.n	8000f02 <_printf_common+0x8e>
	...

08000f50 <_printf_i>:
 8000f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f54:	7e0f      	ldrb	r7, [r1, #24]
 8000f56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f58:	2f78      	cmp	r7, #120	@ 0x78
 8000f5a:	4691      	mov	r9, r2
 8000f5c:	4680      	mov	r8, r0
 8000f5e:	460c      	mov	r4, r1
 8000f60:	469a      	mov	sl, r3
 8000f62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f66:	d807      	bhi.n	8000f78 <_printf_i+0x28>
 8000f68:	2f62      	cmp	r7, #98	@ 0x62
 8000f6a:	d80a      	bhi.n	8000f82 <_printf_i+0x32>
 8000f6c:	2f00      	cmp	r7, #0
 8000f6e:	f000 80d2 	beq.w	8001116 <_printf_i+0x1c6>
 8000f72:	2f58      	cmp	r7, #88	@ 0x58
 8000f74:	f000 80b9 	beq.w	80010ea <_printf_i+0x19a>
 8000f78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f80:	e03a      	b.n	8000ff8 <_printf_i+0xa8>
 8000f82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f86:	2b15      	cmp	r3, #21
 8000f88:	d8f6      	bhi.n	8000f78 <_printf_i+0x28>
 8000f8a:	a101      	add	r1, pc, #4	@ (adr r1, 8000f90 <_printf_i+0x40>)
 8000f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f90:	08000fe9 	.word	0x08000fe9
 8000f94:	08000ffd 	.word	0x08000ffd
 8000f98:	08000f79 	.word	0x08000f79
 8000f9c:	08000f79 	.word	0x08000f79
 8000fa0:	08000f79 	.word	0x08000f79
 8000fa4:	08000f79 	.word	0x08000f79
 8000fa8:	08000ffd 	.word	0x08000ffd
 8000fac:	08000f79 	.word	0x08000f79
 8000fb0:	08000f79 	.word	0x08000f79
 8000fb4:	08000f79 	.word	0x08000f79
 8000fb8:	08000f79 	.word	0x08000f79
 8000fbc:	080010fd 	.word	0x080010fd
 8000fc0:	08001027 	.word	0x08001027
 8000fc4:	080010b7 	.word	0x080010b7
 8000fc8:	08000f79 	.word	0x08000f79
 8000fcc:	08000f79 	.word	0x08000f79
 8000fd0:	0800111f 	.word	0x0800111f
 8000fd4:	08000f79 	.word	0x08000f79
 8000fd8:	08001027 	.word	0x08001027
 8000fdc:	08000f79 	.word	0x08000f79
 8000fe0:	08000f79 	.word	0x08000f79
 8000fe4:	080010bf 	.word	0x080010bf
 8000fe8:	6833      	ldr	r3, [r6, #0]
 8000fea:	1d1a      	adds	r2, r3, #4
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6032      	str	r2, [r6, #0]
 8000ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ff4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e09d      	b.n	8001138 <_printf_i+0x1e8>
 8000ffc:	6833      	ldr	r3, [r6, #0]
 8000ffe:	6820      	ldr	r0, [r4, #0]
 8001000:	1d19      	adds	r1, r3, #4
 8001002:	6031      	str	r1, [r6, #0]
 8001004:	0606      	lsls	r6, r0, #24
 8001006:	d501      	bpl.n	800100c <_printf_i+0xbc>
 8001008:	681d      	ldr	r5, [r3, #0]
 800100a:	e003      	b.n	8001014 <_printf_i+0xc4>
 800100c:	0645      	lsls	r5, r0, #25
 800100e:	d5fb      	bpl.n	8001008 <_printf_i+0xb8>
 8001010:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001014:	2d00      	cmp	r5, #0
 8001016:	da03      	bge.n	8001020 <_printf_i+0xd0>
 8001018:	232d      	movs	r3, #45	@ 0x2d
 800101a:	426d      	negs	r5, r5
 800101c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001020:	4859      	ldr	r0, [pc, #356]	@ (8001188 <_printf_i+0x238>)
 8001022:	230a      	movs	r3, #10
 8001024:	e011      	b.n	800104a <_printf_i+0xfa>
 8001026:	6821      	ldr	r1, [r4, #0]
 8001028:	6833      	ldr	r3, [r6, #0]
 800102a:	0608      	lsls	r0, r1, #24
 800102c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001030:	d402      	bmi.n	8001038 <_printf_i+0xe8>
 8001032:	0649      	lsls	r1, r1, #25
 8001034:	bf48      	it	mi
 8001036:	b2ad      	uxthmi	r5, r5
 8001038:	2f6f      	cmp	r7, #111	@ 0x6f
 800103a:	4853      	ldr	r0, [pc, #332]	@ (8001188 <_printf_i+0x238>)
 800103c:	6033      	str	r3, [r6, #0]
 800103e:	bf14      	ite	ne
 8001040:	230a      	movne	r3, #10
 8001042:	2308      	moveq	r3, #8
 8001044:	2100      	movs	r1, #0
 8001046:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800104a:	6866      	ldr	r6, [r4, #4]
 800104c:	60a6      	str	r6, [r4, #8]
 800104e:	2e00      	cmp	r6, #0
 8001050:	bfa2      	ittt	ge
 8001052:	6821      	ldrge	r1, [r4, #0]
 8001054:	f021 0104 	bicge.w	r1, r1, #4
 8001058:	6021      	strge	r1, [r4, #0]
 800105a:	b90d      	cbnz	r5, 8001060 <_printf_i+0x110>
 800105c:	2e00      	cmp	r6, #0
 800105e:	d04b      	beq.n	80010f8 <_printf_i+0x1a8>
 8001060:	4616      	mov	r6, r2
 8001062:	fbb5 f1f3 	udiv	r1, r5, r3
 8001066:	fb03 5711 	mls	r7, r3, r1, r5
 800106a:	5dc7      	ldrb	r7, [r0, r7]
 800106c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001070:	462f      	mov	r7, r5
 8001072:	42bb      	cmp	r3, r7
 8001074:	460d      	mov	r5, r1
 8001076:	d9f4      	bls.n	8001062 <_printf_i+0x112>
 8001078:	2b08      	cmp	r3, #8
 800107a:	d10b      	bne.n	8001094 <_printf_i+0x144>
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	07df      	lsls	r7, r3, #31
 8001080:	d508      	bpl.n	8001094 <_printf_i+0x144>
 8001082:	6923      	ldr	r3, [r4, #16]
 8001084:	6861      	ldr	r1, [r4, #4]
 8001086:	4299      	cmp	r1, r3
 8001088:	bfde      	ittt	le
 800108a:	2330      	movle	r3, #48	@ 0x30
 800108c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001090:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001094:	1b92      	subs	r2, r2, r6
 8001096:	6122      	str	r2, [r4, #16]
 8001098:	f8cd a000 	str.w	sl, [sp]
 800109c:	464b      	mov	r3, r9
 800109e:	aa03      	add	r2, sp, #12
 80010a0:	4621      	mov	r1, r4
 80010a2:	4640      	mov	r0, r8
 80010a4:	f7ff fee6 	bl	8000e74 <_printf_common>
 80010a8:	3001      	adds	r0, #1
 80010aa:	d14a      	bne.n	8001142 <_printf_i+0x1f2>
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	b004      	add	sp, #16
 80010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	f043 0320 	orr.w	r3, r3, #32
 80010bc:	6023      	str	r3, [r4, #0]
 80010be:	4833      	ldr	r0, [pc, #204]	@ (800118c <_printf_i+0x23c>)
 80010c0:	2778      	movs	r7, #120	@ 0x78
 80010c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	6831      	ldr	r1, [r6, #0]
 80010ca:	061f      	lsls	r7, r3, #24
 80010cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80010d0:	d402      	bmi.n	80010d8 <_printf_i+0x188>
 80010d2:	065f      	lsls	r7, r3, #25
 80010d4:	bf48      	it	mi
 80010d6:	b2ad      	uxthmi	r5, r5
 80010d8:	6031      	str	r1, [r6, #0]
 80010da:	07d9      	lsls	r1, r3, #31
 80010dc:	bf44      	itt	mi
 80010de:	f043 0320 	orrmi.w	r3, r3, #32
 80010e2:	6023      	strmi	r3, [r4, #0]
 80010e4:	b11d      	cbz	r5, 80010ee <_printf_i+0x19e>
 80010e6:	2310      	movs	r3, #16
 80010e8:	e7ac      	b.n	8001044 <_printf_i+0xf4>
 80010ea:	4827      	ldr	r0, [pc, #156]	@ (8001188 <_printf_i+0x238>)
 80010ec:	e7e9      	b.n	80010c2 <_printf_i+0x172>
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	f023 0320 	bic.w	r3, r3, #32
 80010f4:	6023      	str	r3, [r4, #0]
 80010f6:	e7f6      	b.n	80010e6 <_printf_i+0x196>
 80010f8:	4616      	mov	r6, r2
 80010fa:	e7bd      	b.n	8001078 <_printf_i+0x128>
 80010fc:	6833      	ldr	r3, [r6, #0]
 80010fe:	6825      	ldr	r5, [r4, #0]
 8001100:	6961      	ldr	r1, [r4, #20]
 8001102:	1d18      	adds	r0, r3, #4
 8001104:	6030      	str	r0, [r6, #0]
 8001106:	062e      	lsls	r6, r5, #24
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	d501      	bpl.n	8001110 <_printf_i+0x1c0>
 800110c:	6019      	str	r1, [r3, #0]
 800110e:	e002      	b.n	8001116 <_printf_i+0x1c6>
 8001110:	0668      	lsls	r0, r5, #25
 8001112:	d5fb      	bpl.n	800110c <_printf_i+0x1bc>
 8001114:	8019      	strh	r1, [r3, #0]
 8001116:	2300      	movs	r3, #0
 8001118:	6123      	str	r3, [r4, #16]
 800111a:	4616      	mov	r6, r2
 800111c:	e7bc      	b.n	8001098 <_printf_i+0x148>
 800111e:	6833      	ldr	r3, [r6, #0]
 8001120:	1d1a      	adds	r2, r3, #4
 8001122:	6032      	str	r2, [r6, #0]
 8001124:	681e      	ldr	r6, [r3, #0]
 8001126:	6862      	ldr	r2, [r4, #4]
 8001128:	2100      	movs	r1, #0
 800112a:	4630      	mov	r0, r6
 800112c:	f7ff f850 	bl	80001d0 <memchr>
 8001130:	b108      	cbz	r0, 8001136 <_printf_i+0x1e6>
 8001132:	1b80      	subs	r0, r0, r6
 8001134:	6060      	str	r0, [r4, #4]
 8001136:	6863      	ldr	r3, [r4, #4]
 8001138:	6123      	str	r3, [r4, #16]
 800113a:	2300      	movs	r3, #0
 800113c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001140:	e7aa      	b.n	8001098 <_printf_i+0x148>
 8001142:	6923      	ldr	r3, [r4, #16]
 8001144:	4632      	mov	r2, r6
 8001146:	4649      	mov	r1, r9
 8001148:	4640      	mov	r0, r8
 800114a:	47d0      	blx	sl
 800114c:	3001      	adds	r0, #1
 800114e:	d0ad      	beq.n	80010ac <_printf_i+0x15c>
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	079b      	lsls	r3, r3, #30
 8001154:	d413      	bmi.n	800117e <_printf_i+0x22e>
 8001156:	68e0      	ldr	r0, [r4, #12]
 8001158:	9b03      	ldr	r3, [sp, #12]
 800115a:	4298      	cmp	r0, r3
 800115c:	bfb8      	it	lt
 800115e:	4618      	movlt	r0, r3
 8001160:	e7a6      	b.n	80010b0 <_printf_i+0x160>
 8001162:	2301      	movs	r3, #1
 8001164:	4632      	mov	r2, r6
 8001166:	4649      	mov	r1, r9
 8001168:	4640      	mov	r0, r8
 800116a:	47d0      	blx	sl
 800116c:	3001      	adds	r0, #1
 800116e:	d09d      	beq.n	80010ac <_printf_i+0x15c>
 8001170:	3501      	adds	r5, #1
 8001172:	68e3      	ldr	r3, [r4, #12]
 8001174:	9903      	ldr	r1, [sp, #12]
 8001176:	1a5b      	subs	r3, r3, r1
 8001178:	42ab      	cmp	r3, r5
 800117a:	dcf2      	bgt.n	8001162 <_printf_i+0x212>
 800117c:	e7eb      	b.n	8001156 <_printf_i+0x206>
 800117e:	2500      	movs	r5, #0
 8001180:	f104 0619 	add.w	r6, r4, #25
 8001184:	e7f5      	b.n	8001172 <_printf_i+0x222>
 8001186:	bf00      	nop
 8001188:	08001561 	.word	0x08001561
 800118c:	08001572 	.word	0x08001572

08001190 <__sflush_r>:
 8001190:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001196:	0716      	lsls	r6, r2, #28
 8001198:	4605      	mov	r5, r0
 800119a:	460c      	mov	r4, r1
 800119c:	d454      	bmi.n	8001248 <__sflush_r+0xb8>
 800119e:	684b      	ldr	r3, [r1, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	dc02      	bgt.n	80011aa <__sflush_r+0x1a>
 80011a4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	dd48      	ble.n	800123c <__sflush_r+0xac>
 80011aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011ac:	2e00      	cmp	r6, #0
 80011ae:	d045      	beq.n	800123c <__sflush_r+0xac>
 80011b0:	2300      	movs	r3, #0
 80011b2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011b6:	682f      	ldr	r7, [r5, #0]
 80011b8:	6a21      	ldr	r1, [r4, #32]
 80011ba:	602b      	str	r3, [r5, #0]
 80011bc:	d030      	beq.n	8001220 <__sflush_r+0x90>
 80011be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011c0:	89a3      	ldrh	r3, [r4, #12]
 80011c2:	0759      	lsls	r1, r3, #29
 80011c4:	d505      	bpl.n	80011d2 <__sflush_r+0x42>
 80011c6:	6863      	ldr	r3, [r4, #4]
 80011c8:	1ad2      	subs	r2, r2, r3
 80011ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80011cc:	b10b      	cbz	r3, 80011d2 <__sflush_r+0x42>
 80011ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011d0:	1ad2      	subs	r2, r2, r3
 80011d2:	2300      	movs	r3, #0
 80011d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011d6:	6a21      	ldr	r1, [r4, #32]
 80011d8:	4628      	mov	r0, r5
 80011da:	47b0      	blx	r6
 80011dc:	1c43      	adds	r3, r0, #1
 80011de:	89a3      	ldrh	r3, [r4, #12]
 80011e0:	d106      	bne.n	80011f0 <__sflush_r+0x60>
 80011e2:	6829      	ldr	r1, [r5, #0]
 80011e4:	291d      	cmp	r1, #29
 80011e6:	d82b      	bhi.n	8001240 <__sflush_r+0xb0>
 80011e8:	4a28      	ldr	r2, [pc, #160]	@ (800128c <__sflush_r+0xfc>)
 80011ea:	410a      	asrs	r2, r1
 80011ec:	07d6      	lsls	r6, r2, #31
 80011ee:	d427      	bmi.n	8001240 <__sflush_r+0xb0>
 80011f0:	2200      	movs	r2, #0
 80011f2:	6062      	str	r2, [r4, #4]
 80011f4:	04d9      	lsls	r1, r3, #19
 80011f6:	6922      	ldr	r2, [r4, #16]
 80011f8:	6022      	str	r2, [r4, #0]
 80011fa:	d504      	bpl.n	8001206 <__sflush_r+0x76>
 80011fc:	1c42      	adds	r2, r0, #1
 80011fe:	d101      	bne.n	8001204 <__sflush_r+0x74>
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	b903      	cbnz	r3, 8001206 <__sflush_r+0x76>
 8001204:	6560      	str	r0, [r4, #84]	@ 0x54
 8001206:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001208:	602f      	str	r7, [r5, #0]
 800120a:	b1b9      	cbz	r1, 800123c <__sflush_r+0xac>
 800120c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001210:	4299      	cmp	r1, r3
 8001212:	d002      	beq.n	800121a <__sflush_r+0x8a>
 8001214:	4628      	mov	r0, r5
 8001216:	f7ff fbf5 	bl	8000a04 <_free_r>
 800121a:	2300      	movs	r3, #0
 800121c:	6363      	str	r3, [r4, #52]	@ 0x34
 800121e:	e00d      	b.n	800123c <__sflush_r+0xac>
 8001220:	2301      	movs	r3, #1
 8001222:	4628      	mov	r0, r5
 8001224:	47b0      	blx	r6
 8001226:	4602      	mov	r2, r0
 8001228:	1c50      	adds	r0, r2, #1
 800122a:	d1c9      	bne.n	80011c0 <__sflush_r+0x30>
 800122c:	682b      	ldr	r3, [r5, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0c6      	beq.n	80011c0 <__sflush_r+0x30>
 8001232:	2b1d      	cmp	r3, #29
 8001234:	d001      	beq.n	800123a <__sflush_r+0xaa>
 8001236:	2b16      	cmp	r3, #22
 8001238:	d11d      	bne.n	8001276 <__sflush_r+0xe6>
 800123a:	602f      	str	r7, [r5, #0]
 800123c:	2000      	movs	r0, #0
 800123e:	e021      	b.n	8001284 <__sflush_r+0xf4>
 8001240:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001244:	b21b      	sxth	r3, r3
 8001246:	e01a      	b.n	800127e <__sflush_r+0xee>
 8001248:	690f      	ldr	r7, [r1, #16]
 800124a:	2f00      	cmp	r7, #0
 800124c:	d0f6      	beq.n	800123c <__sflush_r+0xac>
 800124e:	0793      	lsls	r3, r2, #30
 8001250:	680e      	ldr	r6, [r1, #0]
 8001252:	bf08      	it	eq
 8001254:	694b      	ldreq	r3, [r1, #20]
 8001256:	600f      	str	r7, [r1, #0]
 8001258:	bf18      	it	ne
 800125a:	2300      	movne	r3, #0
 800125c:	1bf6      	subs	r6, r6, r7
 800125e:	608b      	str	r3, [r1, #8]
 8001260:	2e00      	cmp	r6, #0
 8001262:	ddeb      	ble.n	800123c <__sflush_r+0xac>
 8001264:	6a21      	ldr	r1, [r4, #32]
 8001266:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800126a:	4633      	mov	r3, r6
 800126c:	463a      	mov	r2, r7
 800126e:	4628      	mov	r0, r5
 8001270:	47e0      	blx	ip
 8001272:	2800      	cmp	r0, #0
 8001274:	dc07      	bgt.n	8001286 <__sflush_r+0xf6>
 8001276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800127a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800127e:	81a3      	strh	r3, [r4, #12]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001286:	4407      	add	r7, r0
 8001288:	1a36      	subs	r6, r6, r0
 800128a:	e7e9      	b.n	8001260 <__sflush_r+0xd0>
 800128c:	dfbffffe 	.word	0xdfbffffe

08001290 <_fflush_r>:
 8001290:	b538      	push	{r3, r4, r5, lr}
 8001292:	690b      	ldr	r3, [r1, #16]
 8001294:	4605      	mov	r5, r0
 8001296:	460c      	mov	r4, r1
 8001298:	b913      	cbnz	r3, 80012a0 <_fflush_r+0x10>
 800129a:	2500      	movs	r5, #0
 800129c:	4628      	mov	r0, r5
 800129e:	bd38      	pop	{r3, r4, r5, pc}
 80012a0:	b118      	cbz	r0, 80012aa <_fflush_r+0x1a>
 80012a2:	6a03      	ldr	r3, [r0, #32]
 80012a4:	b90b      	cbnz	r3, 80012aa <_fflush_r+0x1a>
 80012a6:	f7ff faa5 	bl	80007f4 <__sinit>
 80012aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f3      	beq.n	800129a <_fflush_r+0xa>
 80012b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80012b4:	07d0      	lsls	r0, r2, #31
 80012b6:	d404      	bmi.n	80012c2 <_fflush_r+0x32>
 80012b8:	0599      	lsls	r1, r3, #22
 80012ba:	d402      	bmi.n	80012c2 <_fflush_r+0x32>
 80012bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012be:	f7ff fb9e 	bl	80009fe <__retarget_lock_acquire_recursive>
 80012c2:	4628      	mov	r0, r5
 80012c4:	4621      	mov	r1, r4
 80012c6:	f7ff ff63 	bl	8001190 <__sflush_r>
 80012ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012cc:	07da      	lsls	r2, r3, #31
 80012ce:	4605      	mov	r5, r0
 80012d0:	d4e4      	bmi.n	800129c <_fflush_r+0xc>
 80012d2:	89a3      	ldrh	r3, [r4, #12]
 80012d4:	059b      	lsls	r3, r3, #22
 80012d6:	d4e1      	bmi.n	800129c <_fflush_r+0xc>
 80012d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012da:	f7ff fb91 	bl	8000a00 <__retarget_lock_release_recursive>
 80012de:	e7dd      	b.n	800129c <_fflush_r+0xc>

080012e0 <__swbuf_r>:
 80012e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e2:	460e      	mov	r6, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	4605      	mov	r5, r0
 80012e8:	b118      	cbz	r0, 80012f2 <__swbuf_r+0x12>
 80012ea:	6a03      	ldr	r3, [r0, #32]
 80012ec:	b90b      	cbnz	r3, 80012f2 <__swbuf_r+0x12>
 80012ee:	f7ff fa81 	bl	80007f4 <__sinit>
 80012f2:	69a3      	ldr	r3, [r4, #24]
 80012f4:	60a3      	str	r3, [r4, #8]
 80012f6:	89a3      	ldrh	r3, [r4, #12]
 80012f8:	071a      	lsls	r2, r3, #28
 80012fa:	d501      	bpl.n	8001300 <__swbuf_r+0x20>
 80012fc:	6923      	ldr	r3, [r4, #16]
 80012fe:	b943      	cbnz	r3, 8001312 <__swbuf_r+0x32>
 8001300:	4621      	mov	r1, r4
 8001302:	4628      	mov	r0, r5
 8001304:	f000 f82a 	bl	800135c <__swsetup_r>
 8001308:	b118      	cbz	r0, 8001312 <__swbuf_r+0x32>
 800130a:	f04f 37ff 	mov.w	r7, #4294967295
 800130e:	4638      	mov	r0, r7
 8001310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	6922      	ldr	r2, [r4, #16]
 8001316:	1a98      	subs	r0, r3, r2
 8001318:	6963      	ldr	r3, [r4, #20]
 800131a:	b2f6      	uxtb	r6, r6
 800131c:	4283      	cmp	r3, r0
 800131e:	4637      	mov	r7, r6
 8001320:	dc05      	bgt.n	800132e <__swbuf_r+0x4e>
 8001322:	4621      	mov	r1, r4
 8001324:	4628      	mov	r0, r5
 8001326:	f7ff ffb3 	bl	8001290 <_fflush_r>
 800132a:	2800      	cmp	r0, #0
 800132c:	d1ed      	bne.n	800130a <__swbuf_r+0x2a>
 800132e:	68a3      	ldr	r3, [r4, #8]
 8001330:	3b01      	subs	r3, #1
 8001332:	60a3      	str	r3, [r4, #8]
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	6022      	str	r2, [r4, #0]
 800133a:	701e      	strb	r6, [r3, #0]
 800133c:	6962      	ldr	r2, [r4, #20]
 800133e:	1c43      	adds	r3, r0, #1
 8001340:	429a      	cmp	r2, r3
 8001342:	d004      	beq.n	800134e <__swbuf_r+0x6e>
 8001344:	89a3      	ldrh	r3, [r4, #12]
 8001346:	07db      	lsls	r3, r3, #31
 8001348:	d5e1      	bpl.n	800130e <__swbuf_r+0x2e>
 800134a:	2e0a      	cmp	r6, #10
 800134c:	d1df      	bne.n	800130e <__swbuf_r+0x2e>
 800134e:	4621      	mov	r1, r4
 8001350:	4628      	mov	r0, r5
 8001352:	f7ff ff9d 	bl	8001290 <_fflush_r>
 8001356:	2800      	cmp	r0, #0
 8001358:	d0d9      	beq.n	800130e <__swbuf_r+0x2e>
 800135a:	e7d6      	b.n	800130a <__swbuf_r+0x2a>

0800135c <__swsetup_r>:
 800135c:	b538      	push	{r3, r4, r5, lr}
 800135e:	4b29      	ldr	r3, [pc, #164]	@ (8001404 <__swsetup_r+0xa8>)
 8001360:	4605      	mov	r5, r0
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	460c      	mov	r4, r1
 8001366:	b118      	cbz	r0, 8001370 <__swsetup_r+0x14>
 8001368:	6a03      	ldr	r3, [r0, #32]
 800136a:	b90b      	cbnz	r3, 8001370 <__swsetup_r+0x14>
 800136c:	f7ff fa42 	bl	80007f4 <__sinit>
 8001370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001374:	0719      	lsls	r1, r3, #28
 8001376:	d422      	bmi.n	80013be <__swsetup_r+0x62>
 8001378:	06da      	lsls	r2, r3, #27
 800137a:	d407      	bmi.n	800138c <__swsetup_r+0x30>
 800137c:	2209      	movs	r2, #9
 800137e:	602a      	str	r2, [r5, #0]
 8001380:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001384:	81a3      	strh	r3, [r4, #12]
 8001386:	f04f 30ff 	mov.w	r0, #4294967295
 800138a:	e033      	b.n	80013f4 <__swsetup_r+0x98>
 800138c:	0758      	lsls	r0, r3, #29
 800138e:	d512      	bpl.n	80013b6 <__swsetup_r+0x5a>
 8001390:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001392:	b141      	cbz	r1, 80013a6 <__swsetup_r+0x4a>
 8001394:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001398:	4299      	cmp	r1, r3
 800139a:	d002      	beq.n	80013a2 <__swsetup_r+0x46>
 800139c:	4628      	mov	r0, r5
 800139e:	f7ff fb31 	bl	8000a04 <_free_r>
 80013a2:	2300      	movs	r3, #0
 80013a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80013a6:	89a3      	ldrh	r3, [r4, #12]
 80013a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80013ac:	81a3      	strh	r3, [r4, #12]
 80013ae:	2300      	movs	r3, #0
 80013b0:	6063      	str	r3, [r4, #4]
 80013b2:	6923      	ldr	r3, [r4, #16]
 80013b4:	6023      	str	r3, [r4, #0]
 80013b6:	89a3      	ldrh	r3, [r4, #12]
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	81a3      	strh	r3, [r4, #12]
 80013be:	6923      	ldr	r3, [r4, #16]
 80013c0:	b94b      	cbnz	r3, 80013d6 <__swsetup_r+0x7a>
 80013c2:	89a3      	ldrh	r3, [r4, #12]
 80013c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80013c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013cc:	d003      	beq.n	80013d6 <__swsetup_r+0x7a>
 80013ce:	4621      	mov	r1, r4
 80013d0:	4628      	mov	r0, r5
 80013d2:	f000 f84f 	bl	8001474 <__smakebuf_r>
 80013d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013da:	f013 0201 	ands.w	r2, r3, #1
 80013de:	d00a      	beq.n	80013f6 <__swsetup_r+0x9a>
 80013e0:	2200      	movs	r2, #0
 80013e2:	60a2      	str	r2, [r4, #8]
 80013e4:	6962      	ldr	r2, [r4, #20]
 80013e6:	4252      	negs	r2, r2
 80013e8:	61a2      	str	r2, [r4, #24]
 80013ea:	6922      	ldr	r2, [r4, #16]
 80013ec:	b942      	cbnz	r2, 8001400 <__swsetup_r+0xa4>
 80013ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80013f2:	d1c5      	bne.n	8001380 <__swsetup_r+0x24>
 80013f4:	bd38      	pop	{r3, r4, r5, pc}
 80013f6:	0799      	lsls	r1, r3, #30
 80013f8:	bf58      	it	pl
 80013fa:	6962      	ldrpl	r2, [r4, #20]
 80013fc:	60a2      	str	r2, [r4, #8]
 80013fe:	e7f4      	b.n	80013ea <__swsetup_r+0x8e>
 8001400:	2000      	movs	r0, #0
 8001402:	e7f7      	b.n	80013f4 <__swsetup_r+0x98>
 8001404:	2000000c 	.word	0x2000000c

08001408 <_sbrk_r>:
 8001408:	b538      	push	{r3, r4, r5, lr}
 800140a:	4d06      	ldr	r5, [pc, #24]	@ (8001424 <_sbrk_r+0x1c>)
 800140c:	2300      	movs	r3, #0
 800140e:	4604      	mov	r4, r0
 8001410:	4608      	mov	r0, r1
 8001412:	602b      	str	r3, [r5, #0]
 8001414:	f7ff f902 	bl	800061c <_sbrk>
 8001418:	1c43      	adds	r3, r0, #1
 800141a:	d102      	bne.n	8001422 <_sbrk_r+0x1a>
 800141c:	682b      	ldr	r3, [r5, #0]
 800141e:	b103      	cbz	r3, 8001422 <_sbrk_r+0x1a>
 8001420:	6023      	str	r3, [r4, #0]
 8001422:	bd38      	pop	{r3, r4, r5, pc}
 8001424:	200001b8 	.word	0x200001b8

08001428 <__swhatbuf_r>:
 8001428:	b570      	push	{r4, r5, r6, lr}
 800142a:	460c      	mov	r4, r1
 800142c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001430:	2900      	cmp	r1, #0
 8001432:	b096      	sub	sp, #88	@ 0x58
 8001434:	4615      	mov	r5, r2
 8001436:	461e      	mov	r6, r3
 8001438:	da0d      	bge.n	8001456 <__swhatbuf_r+0x2e>
 800143a:	89a3      	ldrh	r3, [r4, #12]
 800143c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001440:	f04f 0100 	mov.w	r1, #0
 8001444:	bf14      	ite	ne
 8001446:	2340      	movne	r3, #64	@ 0x40
 8001448:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800144c:	2000      	movs	r0, #0
 800144e:	6031      	str	r1, [r6, #0]
 8001450:	602b      	str	r3, [r5, #0]
 8001452:	b016      	add	sp, #88	@ 0x58
 8001454:	bd70      	pop	{r4, r5, r6, pc}
 8001456:	466a      	mov	r2, sp
 8001458:	f000 f848 	bl	80014ec <_fstat_r>
 800145c:	2800      	cmp	r0, #0
 800145e:	dbec      	blt.n	800143a <__swhatbuf_r+0x12>
 8001460:	9901      	ldr	r1, [sp, #4]
 8001462:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001466:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800146a:	4259      	negs	r1, r3
 800146c:	4159      	adcs	r1, r3
 800146e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001472:	e7eb      	b.n	800144c <__swhatbuf_r+0x24>

08001474 <__smakebuf_r>:
 8001474:	898b      	ldrh	r3, [r1, #12]
 8001476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001478:	079d      	lsls	r5, r3, #30
 800147a:	4606      	mov	r6, r0
 800147c:	460c      	mov	r4, r1
 800147e:	d507      	bpl.n	8001490 <__smakebuf_r+0x1c>
 8001480:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001484:	6023      	str	r3, [r4, #0]
 8001486:	6123      	str	r3, [r4, #16]
 8001488:	2301      	movs	r3, #1
 800148a:	6163      	str	r3, [r4, #20]
 800148c:	b003      	add	sp, #12
 800148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001490:	ab01      	add	r3, sp, #4
 8001492:	466a      	mov	r2, sp
 8001494:	f7ff ffc8 	bl	8001428 <__swhatbuf_r>
 8001498:	9f00      	ldr	r7, [sp, #0]
 800149a:	4605      	mov	r5, r0
 800149c:	4639      	mov	r1, r7
 800149e:	4630      	mov	r0, r6
 80014a0:	f7ff fb1c 	bl	8000adc <_malloc_r>
 80014a4:	b948      	cbnz	r0, 80014ba <__smakebuf_r+0x46>
 80014a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014aa:	059a      	lsls	r2, r3, #22
 80014ac:	d4ee      	bmi.n	800148c <__smakebuf_r+0x18>
 80014ae:	f023 0303 	bic.w	r3, r3, #3
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	81a3      	strh	r3, [r4, #12]
 80014b8:	e7e2      	b.n	8001480 <__smakebuf_r+0xc>
 80014ba:	89a3      	ldrh	r3, [r4, #12]
 80014bc:	6020      	str	r0, [r4, #0]
 80014be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c2:	81a3      	strh	r3, [r4, #12]
 80014c4:	9b01      	ldr	r3, [sp, #4]
 80014c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014ca:	b15b      	cbz	r3, 80014e4 <__smakebuf_r+0x70>
 80014cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014d0:	4630      	mov	r0, r6
 80014d2:	f000 f81d 	bl	8001510 <_isatty_r>
 80014d6:	b128      	cbz	r0, 80014e4 <__smakebuf_r+0x70>
 80014d8:	89a3      	ldrh	r3, [r4, #12]
 80014da:	f023 0303 	bic.w	r3, r3, #3
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	81a3      	strh	r3, [r4, #12]
 80014e4:	89a3      	ldrh	r3, [r4, #12]
 80014e6:	431d      	orrs	r5, r3
 80014e8:	81a5      	strh	r5, [r4, #12]
 80014ea:	e7cf      	b.n	800148c <__smakebuf_r+0x18>

080014ec <_fstat_r>:
 80014ec:	b538      	push	{r3, r4, r5, lr}
 80014ee:	4d07      	ldr	r5, [pc, #28]	@ (800150c <_fstat_r+0x20>)
 80014f0:	2300      	movs	r3, #0
 80014f2:	4604      	mov	r4, r0
 80014f4:	4608      	mov	r0, r1
 80014f6:	4611      	mov	r1, r2
 80014f8:	602b      	str	r3, [r5, #0]
 80014fa:	f7ff f869 	bl	80005d0 <_fstat>
 80014fe:	1c43      	adds	r3, r0, #1
 8001500:	d102      	bne.n	8001508 <_fstat_r+0x1c>
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	b103      	cbz	r3, 8001508 <_fstat_r+0x1c>
 8001506:	6023      	str	r3, [r4, #0]
 8001508:	bd38      	pop	{r3, r4, r5, pc}
 800150a:	bf00      	nop
 800150c:	200001b8 	.word	0x200001b8

08001510 <_isatty_r>:
 8001510:	b538      	push	{r3, r4, r5, lr}
 8001512:	4d06      	ldr	r5, [pc, #24]	@ (800152c <_isatty_r+0x1c>)
 8001514:	2300      	movs	r3, #0
 8001516:	4604      	mov	r4, r0
 8001518:	4608      	mov	r0, r1
 800151a:	602b      	str	r3, [r5, #0]
 800151c:	f7ff f867 	bl	80005ee <_isatty>
 8001520:	1c43      	adds	r3, r0, #1
 8001522:	d102      	bne.n	800152a <_isatty_r+0x1a>
 8001524:	682b      	ldr	r3, [r5, #0]
 8001526:	b103      	cbz	r3, 800152a <_isatty_r+0x1a>
 8001528:	6023      	str	r3, [r4, #0]
 800152a:	bd38      	pop	{r3, r4, r5, pc}
 800152c:	200001b8 	.word	0x200001b8

08001530 <_init>:
 8001530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001532:	bf00      	nop
 8001534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001536:	bc08      	pop	{r3}
 8001538:	469e      	mov	lr, r3
 800153a:	4770      	bx	lr

0800153c <_fini>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	bf00      	nop
 8001540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001542:	bc08      	pop	{r3}
 8001544:	469e      	mov	lr, r3
 8001546:	4770      	bx	lr
